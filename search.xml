<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一不小心删了Coding仓库的文件</title>
    <url>/2020/05/15/2020-05-15-yi-bu-xiao-xin-shan-liao-coding-cang-ku-de-wen-jian/</url>
    <content><![CDATA[<h3 id="挽救方法"><a href="#挽救方法" class="headerlink" title="挽救方法"></a>挽救方法</h3><p>百度了试了都会在某个地方报错，于是自己瞎点，终于找回了文章和图。。。大起大落的，惊得我一身冷汗。</p>
<p>最后到网页端这点点那点点终于看见了希望：</p>
<p><img src="https://gitee.com/daisf666/blogimage/raw/master/img/image-20200515003637461.png" alt="image-20200515003637461"></p>
<p>不过下载的时候最后不要嵌套文件夹下载，会出现解压失败的问题，最好从里到外一个文件夹一个文件夹下载，我把文章和图下回来了就好了。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>误删</tag>
      </tags>
  </entry>
  <entry>
    <title>多源网文小说下载器制作过程中碰到的部分问题</title>
    <url>/2020/05/14/2020-05-14-duo-yuan-wang-wen-xiao-shuo-xia-zai-qi-zhi-zuo-guo-cheng-zhong-peng-dao-de-bu-fen-wen-ti/</url>
    <content><![CDATA[<h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p><strong>报错：</strong>‘gb2312’ codec can’t decode byte 0x98 in position 11766: illegal multibyte sequence</p>
<p><strong>解决方案：</strong></p>
<p>打开网页：F12 在console输入document.charset 查看编码方式</p>
<p>await resp.text(encoding=’GBK’)，GBK处改成相应的编码</p>
<p>如果有些特殊字符是GB18030中有的，但是是gb2312中没有的，则用gb2312去解码，也比较会出错。 所以，此种情况，可以尝试用和当前编码（gb2312）兼容的但所包含字符更多的编码（gb18030）去解码，或许就可以了。</p>
<p>GB2312，GBK，GB18030，是兼容的，包含的字符个数：GB2312 &lt; GBK &lt; GB18030</p>
<h3 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h3><p><strong>报错：</strong>AttributeError: module ‘asyncio’ has no attribute ‘run’ </p>
<p><strong>解决方案：</strong></p>
<p>asyncio.run is new in Python 3.7. When using older versions of Python, you will need to substitute this with something like the following:</p>
<p>loop = asyncio.get_event_loop()<br>loop.run_until_complete(main())</p>
<p>asyncio.run is a Python 3.7 addition. In 3.5-3.6, your example is roughly equivalent to:</p>
<p>import asyncio</p>
<p>futures = […]<br>loop = asyncio.get_event_loop()<br>loop.run_until_complete(asyncio.wait(futures))</p>
<h3 id="还有太多懒到不想记了。。。"><a href="#还有太多懒到不想记了。。。" class="headerlink" title="还有太多懒到不想记了。。。"></a>还有太多懒到不想记了。。。</h3><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫-Day 7 爬取多源网文小说并下载</title>
    <url>/2020/05/11/2020-05-11-python-pa-chong-day-7-pa-qu-duo-yuan-wang-wen-xiao-shuo-bing-xia-zai/</url>
    <content><![CDATA[<hr>
<h3 id="最近更新"><a href="#最近更新" class="headerlink" title="最近更新"></a>最近更新</h3><p><strong>详情请至：<a href="https://www.52pojie.cn/thread-1176733-1-1.html" target="_blank" rel="noopener">吾爱破解</a></strong></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>采用多进程+多协程的方式实现小说的在线搜索、下载及合并，下载的内容在软件当前运行目录下，包括合并的txt和另外一个保存分章节的文件夹。</strong></p>
<p><img src="https://i.loli.net/2020/05/19/v8Tej3QlDdfx1CE.gif" alt="小说下载器演示"></p>
<h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ol>
<li><strong>以<code>章节名</code>命名下载的每一章txt，以<code>小说源+小说名</code>命名文件夹及合并的txt。</strong></li>
<li><strong>支持检索已存在章节，再次下载将继续未完成的章节。</strong></li>
<li><strong>支持双击小说显示网址,方便下载前检查小说的质量。</strong></li>
<li><strong>支持多个小说源的切换搜索及下载。</strong></li>
<li><strong>支持搜索、获取、下载、合并等信息的反馈。</strong></li>
<li><strong>过滤掉文件不可以命名的特殊符号。</strong></li>
<li><strong>过滤掉每个章节都会存在的广告。</strong></li>
<li><strong>可设置协程并发量，爬取速度快</strong>。</li>
<li><strong>更多功能欢迎下载体验。</strong></li>
</ol>
<p><strong>友情提示：为防止对下载的小说不满意，请提前双击该小说，复制链接到浏览器查看小说质量。</strong></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>首先软件只支持在Win64系统上运行，软件设置了超时和失败章节重新爬取至多6次的机制，若失败则跳过，最后章节没下完全或者卡住了可以重启软件多下几次，会自动重新下载未下完的章节，合并的txt会被替换掉，若尝试多次都没下完全就怪网站，说不定过会下载就下好了，这种问题一般出现在超长章节小说或者你自身网络不稳定的情况下。（若出现闪退等情况推荐以管理员模式运行）</strong></p>
<p><strong>总结：网络稳 + 小说源稳 = 一步到位</strong></p>
<h3 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h3><p><strong>单枪匹马，精力有限，何况不是程序员，都是在网上这学学那学学的，出现问题在所难免，有些网站客观因素导致的问题还望谅解！</strong></p>
<p><strong>发现有关于章节或者内容上的问题时，请先双击源复制网址到浏览器查看是否是书源本身就存在的问题，比如章节的遗漏，内容的错误等等。</strong></p>
<p><img src="https://i.loli.net/2020/05/19/vVjwnseKr3MPhEZ.png" alt="举例"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p><strong>单枪匹马，精力有限，何况不是程序员，都是在网上这学学那学学的，出现问题在所难免，有些网站客观因素导致的问题还望谅解！</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫-Day 6 爬取全国各省市或城市的疫情数据</title>
    <url>/2020/05/01/2020-05-01-python-pa-chong-day-6-pa-qu-quan-guo-ge-sheng-shi-huo-cheng-shi-de-yi-qing-shu-ju/</url>
    <content><![CDATA[<h3 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h3><p>首先要选择一个合适的网站作为目标，千万不要在一个网站上硬磕，这里推荐两个网站：</p>
<ol>
<li><a href="https://news.qq.com/zt2020/page/feiyan.htm?from=timeline&amp;isappinstalled=0#/global" target="_blank" rel="noopener">腾讯</a>，对应json格式疫情数据：<code>https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5</code></li>
<li><a href="https://news.sina.cn/zt_d/yiqing0121?wm=6122_1221" target="_blank" rel="noopener">新浪</a>，对应json格式疫情数据：<code>https://gwpre.sina.cn/interface/fymap2020_data.json?_=1588258367647&amp;callback=dataAPIData</code></li>
</ol>
<p>这里以新浪为例子，讲一下数据是在哪找出的。</p>
<p><img src="https://gitee.com/daisf666/blogimage/raw/master/img/Snipaste_2020-05-01_16-07-40.png" alt="Snipaste_2020-05-01_16-07-40"></p>
<h3 id="1、爬取并存到excel"><a href="#1、爬取并存到excel" class="headerlink" title="1、爬取并存到excel"></a>1、爬取并存到excel</h3><ul>
<li><strong>爬取全国疫情数据代码</strong></li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gb2312 -*-</span>
<span class="token comment" spellcheck="true"># Author : Daisf</span>
<span class="token comment" spellcheck="true"># Date : 2020/4/30 20:30</span>


<span class="token keyword">import</span> json
<span class="token keyword">import</span> re
<span class="token keyword">import</span> requests


<span class="token keyword">def</span> <span class="token function">getHTMLText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        headers <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "</span>
                          <span class="token string">"Chrome/80.0.3987.163 Safari/537.36"</span><span class="token punctuation">}</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding
        <span class="token comment" spellcheck="true"># 注意这里的返回数据是包含在一个js变量中的，用正则处理下就好，group用法自行百度，然后用python自带的json.loads方法就可以转为dict了</span>
        data <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"\(+([^)]*)\)+"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> data
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">""</span>


<span class="token keyword">def</span> <span class="token function">getYqDate</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> YqURL<span class="token punctuation">)</span><span class="token punctuation">:</span>
    html <span class="token operator">=</span> getHTMLText<span class="token punctuation">(</span>YqURL<span class="token punctuation">)</span>
    hjson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
    a <span class="token operator">=</span> hjson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            name <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 省份</span>
            value <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 累计确诊</span>
            econNum <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'econNum'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 现存确诊</span>
            conadd <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'conadd'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 今日确诊</span>
            deathNum <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'deathNum'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 累计死亡人数</span>
            cureNum <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'cureNum'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 累计治愈</span>
            zerodays <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'zerodays'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 零增长天数</span>
            jwsrNum <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'jwsrNum'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 境外输入总数</span>
            single_data <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> econNum<span class="token punctuation">,</span> conadd<span class="token punctuation">,</span> deathNum<span class="token punctuation">,</span> cureNum<span class="token punctuation">,</span> zerodays<span class="token punctuation">,</span> jwsrNum<span class="token punctuation">]</span>
            lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>single_data<span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>


<span class="token keyword">def</span> <span class="token function">writeResult</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> fpath<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'省份\t累计确诊\t现存确诊\t今日确诊\t累计死亡人数\t累计治愈\t零增长天数\t境外输入总数\n'</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
        lst<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    pagenum <span class="token operator">=</span> <span class="token number">1</span>
    output_file <span class="token operator">=</span> <span class="token string">'D:/Personal/Desktop/yq.xls'</span>
    final_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    url <span class="token operator">=</span> <span class="token string">"https://gwpre.sina.cn/interface/fymap2020_data.json?_=1588258367647&amp;callback=dataAPIData"</span>
    getYqDate<span class="token punctuation">(</span>final_data<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    writeResult<span class="token punctuation">(</span>final_data<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><strong>结果</strong></li>
</ul>
<p><img src="https://gitee.com/daisf666/blogimage/raw/master/img/Snipaste_2020-05-01_15-21-21.png" alt="Snipaste_2020-05-01_15-21-21"></p>
<ul>
<li><strong>爬取福建省各市疫情数据</strong></li>
</ul>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gb2312 -*-</span>
<span class="token comment" spellcheck="true"># Author : Daisf</span>
<span class="token comment" spellcheck="true"># Date : 2020/4/30 20:45</span>


<span class="token keyword">import</span> json
<span class="token keyword">import</span> re
<span class="token keyword">import</span> requests


<span class="token keyword">def</span> <span class="token function">getHTMLText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        headers <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "</span>
                          <span class="token string">"Chrome/80.0.3987.163 Safari/537.36"</span><span class="token punctuation">}</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding
        data <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"\(+([^)]*)\)+"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> data
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">""</span>


<span class="token keyword">def</span> <span class="token function">getYqDate</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> YqURL<span class="token punctuation">)</span><span class="token punctuation">:</span>
    html <span class="token operator">=</span> getHTMLText<span class="token punctuation">(</span>YqURL<span class="token punctuation">)</span>
    hjson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
    a <span class="token operator">=</span> hjson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
        <span class="token keyword">if</span> i<span class="token punctuation">[</span><span class="token string">'ename'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"fujian"</span><span class="token punctuation">:</span>
            city <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> city<span class="token punctuation">:</span>
                name <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 城市名称</span>
                value <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'conNum'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 累计确诊</span>
                econNum <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'econNum'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 现存确诊</span>
                conadd <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'conadd'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 今日确诊</span>
                deathNum <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'deathNum'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 累计死亡人数</span>
                cureNum <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'cureNum'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 累计治愈</span>
                zerodays <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'zerodays'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 零增长天数</span>
                single_data <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> econNum<span class="token punctuation">,</span> conadd<span class="token punctuation">,</span> deathNum<span class="token punctuation">,</span> cureNum<span class="token punctuation">,</span> zerodays<span class="token punctuation">]</span>
                lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>single_data<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>


<span class="token keyword">def</span> <span class="token function">writeResult</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> fpath<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'地区\t累计确诊\t现存确诊\t今日确诊\t累计死亡人数\t累计治愈\t零增长天数\n'</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
        lst<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    pagenum <span class="token operator">=</span> <span class="token number">1</span>
    output_file <span class="token operator">=</span> <span class="token string">'D:/Personal/Desktop/fjyq.xls'</span>
    final_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    url <span class="token operator">=</span> <span class="token string">"https://gwpre.sina.cn/interface/fymap2020_data.json?_=1588258367647&amp;callback=dataAPIData"</span>
    getYqDate<span class="token punctuation">(</span>final_data<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    writeResult<span class="token punctuation">(</span>final_data<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><strong>结果</strong></li>
</ul>
<p><img src="https://gitee.com/daisf666/blogimage/raw/master/img/Snipaste_2020-05-01_15-23-20.png" alt="Snipaste_2020-05-01_15-23-20"></p>
<p>有兴趣的还可以自行绘制类似网页上的疫情地图哦~</p>
<h3 id="2、部署到运行在服务器上的机器人"><a href="#2、部署到运行在服务器上的机器人" class="headerlink" title="2、部署到运行在服务器上的机器人"></a>2、部署到运行在服务器上的机器人</h3><ul>
<li><strong>代码</strong>（注：作为插件配合其他相关依赖使用，详情见：<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1171812&amp;page=1#pid31746882" target="_blank" rel="noopener">52pojie</a>）</li>
</ul>
<p>代码可拓展的空间较大，这里只是随便部署了一下，可以改改回复的排版以及增加使用命令传参的功能。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gb2312 -*-</span>
<span class="token comment" spellcheck="true"># Author : Daisf</span>
<span class="token comment" spellcheck="true"># Date : 2020/4/30 22:45</span>


<span class="token keyword">import</span> json
<span class="token keyword">import</span> re
<span class="token keyword">import</span> requests
<span class="token keyword">from</span> nonebot <span class="token keyword">import</span> on_command<span class="token punctuation">,</span> CommandSession
<span class="token keyword">from</span> nonebot <span class="token keyword">import</span> on_natural_language<span class="token punctuation">,</span> NLPSession<span class="token punctuation">,</span> IntentCommand


@on_command<span class="token punctuation">(</span><span class="token string">'福建今日疫情'</span><span class="token punctuation">,</span> aliases<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'福建今日疫情'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">yiqing</span><span class="token punctuation">(</span>session<span class="token punctuation">:</span> CommandSession<span class="token punctuation">)</span><span class="token punctuation">:</span>
    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    url <span class="token operator">=</span> <span class="token string">"https://gwpre.sina.cn/interface/fymap2020_data.json?_=1588258367647&amp;callback=dataAPIData"</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
                 <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "</span>
                 <span class="token string">"Chrome/80.0.3987.163 Safari/537.36"</span><span class="token punctuation">}</span>
    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding
    data <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"\(+([^)]*)\)+"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    hjson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    a <span class="token operator">=</span> hjson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
        <span class="token keyword">if</span> i<span class="token punctuation">[</span><span class="token string">'ename'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'fujian'</span><span class="token punctuation">:</span>
            city <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> city<span class="token punctuation">:</span>
                name <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 城市名称</span>
                value <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'conNum'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 累计确诊</span>
                econNum <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'econNum'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 现存确诊</span>
                conadd <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'conadd'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 今日确诊</span>
                deathNum <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'deathNum'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 累计死亡人数</span>
                cureNum <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'cureNum'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 累计治愈</span>
                zerodays <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'zerodays'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 零增长天数</span>
                single_str <span class="token operator">=</span> <span class="token punctuation">[</span>name <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"累计确诊："</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>   <span class="token string">"现存确诊："</span> <span class="token operator">+</span> econNum <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> 
                <span class="token string">"今日确诊："</span> <span class="token operator">+</span> conadd <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span>  <span class="token string">"累计死亡人数："</span> <span class="token operator">+</span> deathNum <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">"累计治愈："</span> <span class="token operator">+</span> cureNum <span class="token operator">+</span> 
                <span class="token string">'\n'</span> <span class="token operator">+</span>  <span class="token string">"零增长天数："</span> <span class="token operator">+</span> zerodays <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">]</span>
                results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>single_str<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        alist <span class="token operator">=</span> alist <span class="token operator">+</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 将列表里字符串的列表外壳去掉</span>
    <span class="token keyword">await</span> session<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将列表里的字符串拼接并输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><strong>演示</strong></li>
</ul>
<p><img src="https://gitee.com/daisf666/blogimage/raw/master/img/yiqing.gif" alt="yiqing"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫-Day 5 爬取起点中文网小说月票排行</title>
    <url>/2020/04/30/2020-04-30-python-pa-chong-day-5-pa-qu-qi-dian-zhong-wen-wang-xiao-shuo-yue-piao-pai-xing/</url>
    <content><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gb2312 -*-</span>
<span class="token comment" spellcheck="true"># Author : Daisf</span>
<span class="token comment" spellcheck="true"># Date : 2020/4/30 16:00</span>

<span class="token keyword">import</span> json
<span class="token keyword">import</span> requests


<span class="token keyword">def</span> <span class="token function">getHTMLText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        headers <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "</span>
                          <span class="token string">"Chrome/80.0.3987.163 Safari/537.36"</span><span class="token punctuation">}</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding
        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">""</span>


<span class="token keyword">def</span> <span class="token function">getYuepiaoList</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> YuepiaoURL<span class="token punctuation">)</span><span class="token punctuation">:</span>
    html <span class="token operator">=</span> getHTMLText<span class="token punctuation">(</span>YuepiaoURL<span class="token punctuation">)</span>
    hjson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
    a <span class="token operator">=</span> hjson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'records'</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            bid <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'bid'</span><span class="token punctuation">]</span>
            bName <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'bName'</span><span class="token punctuation">]</span>
            bAuth <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'bAuth'</span><span class="token punctuation">]</span>
            desc <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span>
            cat <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">]</span>
            catId <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'catId'</span><span class="token punctuation">]</span>
            cnt <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'cnt'</span><span class="token punctuation">]</span>
            rankCnt <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'rankCnt'</span><span class="token punctuation">]</span>
            rankNum <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'rankNum'</span><span class="token punctuation">]</span>
            single_data <span class="token operator">=</span> <span class="token punctuation">[</span>rankNum<span class="token punctuation">,</span> bName<span class="token punctuation">,</span> bAuth<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> rankCnt<span class="token punctuation">]</span>
            lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>single_data<span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>


<span class="token keyword">def</span> <span class="token function">writeResult</span><span class="token punctuation">(</span>pagenum<span class="token punctuation">,</span> lst<span class="token punctuation">,</span> fpath<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">if</span> pagenum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'月票排名\t书名\t作者\t简介\t月票数\n'</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
        lst<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    pagenum <span class="token operator">=</span> <span class="token number">1</span>
    output_file <span class="token operator">=</span> <span class="token string">'D:/Personal/Desktop/story.xls'</span>
    final_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token string">"https://m.qidian.com/majax/rank/yuepiaolist?_csrfToken=gA9RhhkaJwVdxBVFV1e0aX7bfkq2jMHnlnNUEDOl&amp;gender=male&amp;pageNum="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>
            pagenum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;catId=-1&amp;yearmonth=202004"</span>
        getYuepiaoList<span class="token punctuation">(</span>final_data<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
        writeResult<span class="token punctuation">(</span>pagenum<span class="token punctuation">,</span> final_data<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span>
        pagenum <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>程序比较简单，难点就是要找到<code>['data']['records']</code>,首先我们要打开<a href="https://m.qidian.com/rank/yuepiao/male?gender=male&amp;catId=-1&amp;yearmonth=202004" target="_blank" rel="noopener">原创风云榜-起点中文网</a>，因为静态页面只显示了排名在前20的小说，找不到之后的排名，此时我们F12打开network，点击XHR，往下滚动页面就会发现多出了<code>yuepiaolist?_···</code>，查看preview发现数据都在这呢，为了查看方便，你也可以open in new tab，然后全选复制代码到<a href="http://json.cn/" target="_blank" rel="noopener">json在线解析</a>,这样会比较直观清楚一些。</p>
<p><img src="https://gitee.com/daisf666/blogimage/raw/master/img/Snipaste_2020-04-30_17-47-55.png" alt="Snipaste_2020-04-30_17-47-55"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Next添加点击效果以及简易地禁用鼠标的部分操作</title>
    <url>/2020/04/24/2020-04-24-next-tian-jia-dian-ji-xiao-guo-yi-ji-jian-yi-di-jin-yong-shu-biao-de-bu-fen-cao-zuo/</url>
    <content><![CDATA[<h3 id="一、添加鼠标点击效果（小红心以及核心价值观文字）"><a href="#一、添加鼠标点击效果（小红心以及核心价值观文字）" class="headerlink" title="一、添加鼠标点击效果（小红心以及核心价值观文字）"></a>一、添加鼠标点击效果（小红心以及核心价值观文字）</h3><ol>
<li>在<code>../hexo/themes/next/source/js/</code>目录下新建<code>love-click.js</code>：</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 爱心特效 */</span>

<span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> e <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> e<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">--</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">.</span><span class="token number">004</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">.</span><span class="token number">013</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">"left:"</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">"px;top:"</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">"px;opacity:"</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">+</span> <span class="token string">";transform:scale("</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token operator">+</span> <span class="token string">") rotate(45deg);background:"</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">";z-index:99999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">"function"</span> <span class="token operator">==</span> <span class="token keyword">typeof</span> e<span class="token punctuation">.</span>onclick <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      t <span class="token operator">&amp;&amp;</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">o</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"heart"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      el<span class="token punctuation">:</span> a<span class="token punctuation">,</span>
      x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">,</span>
      y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">,</span>
      scale<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      alpha<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      color<span class="token punctuation">:</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      a<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      a<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText <span class="token operator">=</span> e
    <span class="token punctuation">}</span>
    t<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"rgb("</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  e<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">=</span> e<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span> e<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span> e<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span> e<span class="token punctuation">.</span>oRequestAnimationFrame <span class="token operator">||</span> e<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">1e3</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token string">".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* 社会主体核心价值观效果 */</span>
<span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>
      y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>
    $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">100000000</span><span class="token punctuation">,</span>
      <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>
      <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>
      <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>
      <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>
      <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#ff6651"</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>
      <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>在<code>../hexo/themes/next/layout/_layout.swig</code>末尾添加引用：</li>
</ol>
<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 鼠标点击特效 --></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/love-click.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 
 <span class="token comment" spellcheck="true">&lt;!-- 禁止右键菜单，拖动，选中 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>注意要放在<code>&lt;/body&gt;</code>之前。</p>
<h3 id="二、禁止右键菜单、选中以及拖动功能"><a href="#二、禁止右键菜单、选中以及拖动功能" class="headerlink" title="二、禁止右键菜单、选中以及拖动功能"></a>二、禁止右键菜单、选中以及拖动功能</h3><p>在<code>../hexo/themes/next/layout/_layout.swig</code>末尾添加：</p>
<pre class="line-numbers language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- 禁止右键菜单，拖动，选中 --></span>
&lt;body oncontextmenu='return false' ondragstart='return false' onselectstart ='return false'><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>具体位置同上，这里给出图片让大家更清楚一些：<img src="https://gitee.com/daisf666/blogimage/raw/master/img/image-20200424161845270.png" alt=""></p>
<p>还可自行百度<code>html禁用复制代码</code>根据需要自行添加。</p>
<h3 id="三、未成功"><a href="#三、未成功" class="headerlink" title="三、未成功"></a>三、未成功</h3><ol start="2">
<li>更改鼠标样式。</li>
<li>代码高亮。</li>
<li>代码复制。</li>
<li>添加分享功能。</li>
</ol>
<p>addthis在开启了<code>fancybox</code>之后忽隐忽现，不开则不出现，手机端出现地频率多些。</p>
<p>如果关闭了<code>fancybox</code>还会使核心价值观文字特效失效。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+DaoVoice实现网页在线通讯功能</title>
    <url>/2020/04/23/2020-04-23-hexo-daovoice-shi-xian-wang-ye-zai-xian-tong-xun-gong-neng/</url>
    <content><![CDATA[<h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p><a href="http://dashboard.daovoice.io/app/339ec5d6" target="_blank" rel="noopener">DaoVoice官网</a></p>
<ol>
<li><p>先注册，注册之后，在左侧菜单栏点击<strong>应用设置</strong>，在这里你可以定制你的聊天框，然后点击<strong>安装到网站</strong>，往下翻，找到你的<strong>app_id</strong>。<img src="https://gitee.com/daisf666/blogimage/raw/master/img/image-20200423181651158.png" alt=""></p>
</li>
<li><p>在next主题的配置文件中（\themes\next_config.yml），新增如下内容：</p>
</li>
</ol>
<pre><code># Online contact
daovoice: true
daovoice_app_id: 这里替换成你DaoVoice上的appid</code></pre><p>再到\themes\next\layout_partials\head.swig文件的最后，新增如下内容：</p>
<pre><code>{% if theme.daovoice %}
  <script>
  (function(i,s,o,g,r,a,m){i["DaoVoiceObject"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)})(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice")
  daovoice('init', {
      app_id: "{{theme.daovoice_app_id}}"
    });
  daovoice('update');
  </script>
{% endif %}</code></pre><ol start="3">
<li>重新部署</li>
</ol>
<p>现在就可以在网站上看到你的聊天框了，是不是很简单呢，部署前你也可以先在本地测试一下。</p>
<p><strong>注意：</strong>如果出现一些显示不正常，多半是冲突了，我是因为开启了pjax的缘故，就导致每次打开新的页面会出现空白内容，只剩一个侧边栏，必须刷新一下才能显示正常，把pjax关了就好了。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>daovoice</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+Gitee</title>
    <url>/2020/04/23/2020-04-23-picgo-gitee/</url>
    <content><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>Gitee也有许多自身的缺点，比如容量的限制和禁止大量外链的声明。。。万一哪天被删库了就gg了。</p>
<p><img src="https://gitee.com/daisf666/blogimage/raw/master/img/image-20200423002641422.png" alt=""></p>
<h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h3><p>怎么安装插件我上一篇文章说了，这里要注意的是要安装<strong>gitee-uploader 1.1.2</strong>这个版本,不要安装左边那个带beta的,如果是离线安装,则要选择对应的<strong>picgo-plugin-gitee-uploader</strong> clone,因为我测试<strong>picgo-plugin-gitee</strong>不成功。</p>
<h3 id="2-建立gitee（码云）图床库"><a href="#2-建立gitee（码云）图床库" class="headerlink" title="2. 建立gitee（码云）图床库"></a>2. 建立gitee（码云）图床库</h3><p>注册码云的方法很简单，不多说了，我们直接建立自己的图床库。<br>点击右上角的+号，新建仓库<br>新建仓库的要点如下：</p>
<ol>
<li><h5 id="输入一个仓库名称"><a href="#输入一个仓库名称" class="headerlink" title="输入一个仓库名称"></a>输入一个仓库名称</h5></li>
<li><h5 id="其次将仓库设为公开"><a href="#其次将仓库设为公开" class="headerlink" title="其次将仓库设为公开"></a>其次将仓库设为公开</h5></li>
<li><h5 id="勾选使用Readme文件初始化这个仓库"><a href="#勾选使用Readme文件初始化这个仓库" class="headerlink" title="勾选使用Readme文件初始化这个仓库"></a>勾选使用Readme文件初始化这个仓库</h5></li>
</ol>
<p><img src="https://gitee.com/daisf666/blogimage/raw/master/img/image-20200423004646627.png" alt=""></p>
<p>点击创建进入下一步（我这里已经创建了blogimage,所以前面加了个d以作示范,下面仍是blogimage）。</p>
<h3 id="3-获取token"><a href="#3-获取token" class="headerlink" title="3. 获取token:"></a>3. 获取token:</h3><ol>
<li>点击头像，进入设置</li>
<li>找到左边安全设置里面的私人令牌</li>
<li>点击<strong>生成新令牌</strong>，把<strong>projects</strong>这一项勾上，其他的不用勾，然后提交</li>
<li>这里需要验证一下密码，验证密码之后会出来一串数字，这一串数字就是你的token，这串数字只出现一次，到配置之前要将这串数字保存好。</li>
</ol>
<h3 id="4-配置PicGo"><a href="#4-配置PicGo" class="headerlink" title="4. 配置PicGo"></a>4. 配置PicGo</h3><p>   安装了<strong>gitee-uploader 1.1.2</strong>插件之后，我们开始配置插件</p>
<p>   配置插件的要点如下：</p>
<p> <img src="https://gitee.com/daisf666/blogimage/raw/master/img/image-20200423005344922.png" alt=""></p>
<ul>
<li><p>repo：用户名/仓库名称，比如我自己的仓库daisf666/blogImage</p>
</li>
<li><p>branch：分支，这里写上master</p>
</li>
<li><p>token：填入码云的私人令牌</p>
</li>
<li><p>path：路径，一般写上img</p>
</li>
<li><p>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 Upload 图片名 by picGo - 时间</p>
</li>
</ul>
<p>现在保存你刚才的配置，然后将它设置为默认图床，大功告成。</p>
<p><strong>随便选一张图片上传试试看，PicGo也支持剪贴板上传，配上win10的<em>Snipaste</em>截图神器，简直是利器！</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo不为人知的一些小技巧</title>
    <url>/2020/04/22/2020-04-22-picgo-bu-wei-ren-zhi-de-yi-xie-xiao-ji-qiao/</url>
    <content><![CDATA[<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><ul>
<li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></li>
<li><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a></li>
</ul>
<h3 id="一、离线安装插件"><a href="#一、离线安装插件" class="headerlink" title="一、离线安装插件"></a>一、离线安装插件</h3><p>不知道是我自己的问题还是PicGo的问题，我始终都无法在gui完成在线安装，即使是在我重装了PicGo或者重启电脑之后，总是会弹出加载插件错误的提示。去Github看了一眼，在某些插件的介绍文档中，发现了离线安装的方式，我用的是windows，下面给出我的安装步骤：</p>
<ol>
<li><p>到<strong>C:\Users\MACHENIKE\AppData\Roaming\picgo</strong>目录下，右键“Git bush here”，clone GitHub上的插件项目到此目录。</p>
</li>
<li><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> ./插件名 或者 <span class="token function">npm</span> i picgo-plugin-gitee <span class="token comment" spellcheck="true"># 比如安装支持Gitee的插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<p>到此就安装完成了，是不是很简单，重启PicGo之后就可以看到插件。</p>
<p>（后来发现可以直接把在线安装出现在桌面的包放到该目录下，重启也有效）</p>
<p>其他安装方式：</p>
<p><img src="https://i.loli.net/2020/04/22/sgRIzSdb7JNjeZy.png" alt=""></p>
<h3 id="二、开启Typora自动上传功能"><a href="#二、开启Typora自动上传功能" class="headerlink" title="二、开启Typora自动上传功能"></a>二、开启Typora自动上传功能</h3><p>怎么让图片上传更加便捷呢？现在让我们打开Typora的偏好设置，进行如下操作：</p>
<p><img src="https://i.loli.net/2020/04/22/mDHuoLQx3hf9Ili.png" alt=""></p>
<p>为了更直观地体现此功能，下面给出一张gif：</p>
<p><img src="https://gitee.com/daisf666/blogimage/raw/master/img/typora-upload-image-gif-v2.gif" alt="typora-upload-image-gif-v2"></p>
<p>如果你未开启自动上传图片的功能，把图片拖入 Typora 或者粘贴到 Typora，右键图片将会看到一个上传图片的选项，在将图片复制到文章中的时候也会自动显示该选项。在文章目录下会有个<strong>upload</strong>文件夹储存图片到本地。<strong>注意如果图床存在同名文件上传是会失败的。</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫-Day 4 爬取天天基金网的基金净值</title>
    <url>/2020/04/22/2020-04-22-python-pa-chong-day-4-pa-qu-tian-tian-ji-jin-wang-de-ji-jin-jing-zhi/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>选取网站进行爬取时，应尽量选择基金信息静态存在于HTML页面中而非js代码生成的网站，还要注意Robots协议的限制。当进行模拟人的信息搜集且不会对网站造成性能损坏和经济损失的时候，我们可以适当忽略robots协议。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gb2312 -*-</span>
<span class="token comment" spellcheck="true"># Author : Daisf</span>
<span class="token comment" spellcheck="true"># Date : 2020/4/22 15:00</span>


<span class="token keyword">import</span> requests
<span class="token keyword">import</span> re
<span class="token keyword">import</span> traceback
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup


<span class="token keyword">def</span> <span class="token function">getHTMLText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        headers <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "</span>
                          <span class="token string">"Chrome/80.0.3987.163 Safari/537.36"</span><span class="token punctuation">}</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding
        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">""</span>


<span class="token keyword">def</span> <span class="token function">getFundList</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> fundURL<span class="token punctuation">)</span><span class="token punctuation">:</span>
    html <span class="token operator">=</span> getHTMLText<span class="token punctuation">(</span>fundURL<span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
    a <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            id <span class="token operator">=</span> i<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>
            <span class="token comment" spellcheck="true"># re.findall返回的是list，这里我们要把它转换为str，这里list里面就只有一个str的元素，这么做（指[0]）是为了下面url的赋值。</span>
            lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'tr\d{6}'</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>


<span class="token keyword">def</span> <span class="token function">getFundIofo</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> fundURL<span class="token punctuation">,</span> fpath<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"基金信息"</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> fund <span class="token keyword">in</span> lst<span class="token punctuation">:</span>
        url <span class="token operator">=</span> fundURL <span class="token operator">+</span> fund<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.html'</span>      <span class="token comment" spellcheck="true"># 因为lst储存的是trxxxxxx，这里我们只需要xxxxxx，故从第3位也就是0、1、2的2开始到结束。</span>
        html <span class="token operator">=</span> getHTMLText<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> html <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            infoDict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
            foundInfo <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">"merchandiseDetail"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            name <span class="token operator">=</span> foundInfo<span class="token punctuation">.</span>find<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">"fundDetail-tit"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            infoDict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'基金名称'</span><span class="token punctuation">:</span> name<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            keyList <span class="token operator">=</span> foundInfo<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'dt'</span><span class="token punctuation">)</span>
            valueList <span class="token operator">=</span> foundInfo<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'dd'</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>keyList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                key <span class="token operator">=</span> keyList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'净值估算每'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 去掉多于备注："净值估算每个交易日XXXX请以基金管理人披露净值为准。"</span>
                val <span class="token operator">=</span> valueList<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># 这里每个dt下有3个dd，我们只需要0，3，6去一一对应key的0，1，2</span>
                infoDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
            <span class="token comment" spellcheck="true"># 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</span>
            <span class="token keyword">with</span> open<span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>infoDict<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    fund_list_url <span class="token operator">=</span> <span class="token string">"https://fund.eastmoney.com/fund.html#os_0;isall_0;ft_;pt_1"</span>
    fund_info_url <span class="token operator">=</span> <span class="token string">"https://fund.eastmoney.com/"</span>
    output_file <span class="token operator">=</span> <span class="token string">'D:/Fundinfo.txt'</span>
    slist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    getFundList<span class="token punctuation">(</span>slist<span class="token punctuation">,</span> fund_list_url<span class="token punctuation">)</span>
    getFundIofo<span class="token punctuation">(</span>slist<span class="token punctuation">,</span> fund_info_url<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://i.loli.net/2020/04/22/kfTvj69AYCtNQg4.png" alt=""></p>
<p>感兴趣的话你也可以将其储存到excel中，会更加直观清楚。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫-Day 3 爬取淘宝Dior口红价格</title>
    <url>/2020/04/21/2020-04-21-python-pa-chong-day-3-pa-qu-tao-bao-dior-kou-hong-jie-ge/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>爬取网站数据时请先查看该网站的robots.txt协议，禁止非法爬取！本次爬取仅作类人行为的爬虫练习，敬请谅解。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gb2312 -*-</span>
<span class="token comment" spellcheck="true"># Author : Daisf</span>
<span class="token comment" spellcheck="true"># Date : 2020/4/21 21:30</span>

<span class="token keyword">import</span> requests
<span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">getHTMLText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        headers <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"</span><span class="token punctuation">,</span>
            <span class="token string">"cookie"</span><span class="token punctuation">:</span> <span class="token string">"自己登录淘宝查询商品完成后的cookie"</span>
        <span class="token punctuation">}</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding
        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">""</span>

<span class="token keyword">def</span> <span class="token function">parsePage</span><span class="token punctuation">(</span>ilt<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        plt <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\"view_price\"\:\"[\d\.]*\"'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>
        tlt <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\"raw_title\"\:\".*?\"'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>plt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            price <span class="token operator">=</span> eval<span class="token punctuation">(</span>plt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            title <span class="token operator">=</span> eval<span class="token punctuation">(</span>tlt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            ilt<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>price<span class="token punctuation">,</span> title<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">printGoodsList</span><span class="token punctuation">(</span>ilt<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tplt <span class="token operator">=</span> <span class="token string">"{0:^4}\t{1:&lt;8}\t{2:{3}&lt;16}"</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tplt<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"序号"</span><span class="token punctuation">,</span> <span class="token string">"价格"</span><span class="token punctuation">,</span> <span class="token string">"商品名称"</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">12288</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> g <span class="token keyword">in</span> ilt<span class="token punctuation">:</span>
        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>tplt<span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">,</span> g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">12288</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    goods <span class="token operator">=</span> <span class="token string">'Dior口红'</span>
    depth <span class="token operator">=</span> <span class="token number">2</span>
    start_url <span class="token operator">=</span> <span class="token string">'https://s.taobao.com/search?q='</span> <span class="token operator">+</span> goods
    infoList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> start_url <span class="token operator">+</span> <span class="token string">'&amp;s='</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">44</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>
            html <span class="token operator">=</span> getHTMLText<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            parsePage<span class="token punctuation">(</span>infoList<span class="token punctuation">,</span> html<span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
    printGoodsList<span class="token punctuation">(</span>infoList<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong>cookie的获取方式——查询结果网页中F12，点击Network，找到Name为search?q=DiorXXXXXX请求，在Headers下可以找到cookie和user-agent，不确定是否找对了没有可以看到General的Request URL是否和你现在浏览器的地址一致，翻到最下面也可以看到你查询的关键字信息。我用的是Pycharm，写代码的时候犯了一个致命错误，就是没有把右上角的运行程序改为当前的程序，对着错误代码的错误结果，改了一晚上正确代码，我真是醉了，好像是第二次了。以后只用快捷键运行程序了，怒。运行当前程序的快捷键是<strong>Ctrl+Shift+F10</strong>。</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/daisf666/img/articleimg/20200421002929.png" alt="淘宝爬取Dior口红价格"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫-Day 2 爬取2019年中国大学排行</title>
    <url>/2020/04/20/2020-04-20-python-pa-chong-day-2-pa-qu-2019-nian-zhong-guo-da-xue-pai-xing/</url>
    <content><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gb2312 -*-</span>
<span class="token comment" spellcheck="true"># Author : Daisf</span>
<span class="token comment" spellcheck="true"># Date : 2020/4/20 13:22</span>

<span class="token keyword">import</span> bs4
<span class="token keyword">import</span> requests

<span class="token keyword">def</span> <span class="token function">getHtmltext</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> agent<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>agent<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 不为200报错</span>
        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding
        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>
        <span class="token keyword">return</span> r<span class="token punctuation">.</span>text
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">fillUnivlist</span><span class="token punctuation">(</span>ulist<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">:</span>
    soup <span class="token operator">=</span> bs4<span class="token punctuation">.</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tr <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'tbody'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">:</span>
        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>tr<span class="token punctuation">,</span> bs4<span class="token punctuation">.</span>element<span class="token punctuation">.</span>Tag<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 用来判断tr标签类型是否是bs4.element.Tag</span>
            tds <span class="token operator">=</span> tr<span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在tr里查找td，等价tr.find('td')</span>
            ulist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>tds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">,</span> tds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">,</span> tds<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">printUnivlist</span><span class="token punctuation">(</span>ulist<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tplt <span class="token operator">=</span> <span class="token string">"{0:^10}\t{1:{3}^10}\t{2:^10}"</span>    <span class="token comment" spellcheck="true"># {3}是format的第四个参数chr(12288)，^是居中对齐，学校名称是中文，所以填充不能用默认的西文空格填充，否则对不齐</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tplt<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"排名"</span><span class="token punctuation">,</span> <span class="token string">"学校名称"</span><span class="token punctuation">,</span> <span class="token string">"总分"</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">12288</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># chr(12288)是中文字符空格</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        u <span class="token operator">=</span> ulist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>tplt<span class="token punctuation">.</span>format<span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chr<span class="token punctuation">(</span><span class="token number">12288</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    agent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0'</span><span class="token punctuation">}</span>
    uinfo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    url <span class="token operator">=</span> <span class="token string">'http://www.zuihaodaxue.cn/zuihaodaxuepaiming2019.html'</span>
    html <span class="token operator">=</span> getHtmltext<span class="token punctuation">(</span>url<span class="token punctuation">,</span> agent<span class="token punctuation">)</span>
    fillUnivlist<span class="token punctuation">(</span>uinfo<span class="token punctuation">,</span> html<span class="token punctuation">)</span>
    printUnivlist<span class="token punctuation">(</span>uinfo<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://cdn.jsdelivr.net/gh/daisf666/img/articleimg/20200420203223.png" alt="2019年中国大学排行前20结果"></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫-Day 1 爬取并保存某张图片</title>
    <url>/2020/04/20/2020-04-20-python-pa-chong-day-1-pa-qu-bing-bao-cun-mou-zhang-tu-pian/</url>
    <content><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: gb2312 -*-</span>
<span class="token comment" spellcheck="true"># Author : Daisf</span>
<span class="token comment" spellcheck="true"># Date : 2020/4/20 13:22</span>

<span class="token keyword">import</span> requests

<span class="token keyword">def</span> <span class="token function">getHtml</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>kw<span class="token punctuation">,</span>agent<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> params<span class="token operator">=</span>kw<span class="token punctuation">,</span> headers<span class="token operator">=</span>agent<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
        <span class="token keyword">return</span> len<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    agent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0'</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 请求头</span>
    url <span class="token operator">=</span> <span class="token string">'http://image.ngchina.com.cn/2015/0323/20150323111050534.jpg'</span>
    kw <span class="token operator">=</span> None   <span class="token comment" spellcheck="true">#{'wd':'python'}   # 百度搜索关键字</span>
    path <span class="token operator">=</span> <span class="token string">'D:/Personal/Desktop/1.jpg'</span>   <span class="token comment" spellcheck="true"># 图片保存路径</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>getHtml<span class="token punctuation">(</span>url<span class="token punctuation">,</span> kw<span class="token punctuation">,</span> agent<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>功能：</strong>爬取国家地理网站的一张图片并保存，部分代码为练习，可自行删除，写入文件要跟具体的文件名（1.jpg），只添加路径，没给文件命名，会报这个错<strong>PermissionError: [Errno 13] Permission denied:XXXXXX</strong>，保存路径注意要用斜杠”/“</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter Notebook的安装与配置</title>
    <url>/2020/04/16/2020-04-16-jupyter-notebook-de-an-zhuang-yu-pei-zhi/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><code>pip install jupyter</code></li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li><code>jupyter notebook --generate-config</code></li>
</ul>
<p>通常我们配置jupyter notebook只是更改默认启动目录，这条命令会在<strong>C:\Users\你的用户名.jupyter</strong>文件夹下生成<strong>jupyter_notebook_config.py</strong>配置文件，打开后搜索找到<br><strong>c.NotebookApp.notebook_dir = ‘在这里填上你需要的目录’</strong>，最后记得把前面的注释去掉，也就是‘#’。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>jupyter notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>关于QThead类中两个函数的理解</title>
    <url>/2020/04/14/2020-04-14-guan-yu-qthead-lei-zhong-liang-ge-han-shu-de-li-jie/</url>
    <content><![CDATA[<ul>
<li>pyqtSignal()：指定这是一个带什么参数的信号</li>
<li>emit()：发射带什么参数的信号（不仅可以激活连接的槽函数，还可以传递参数给他）</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>QThead</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>关于视频中用cv2.imshow循环读取图片无法显示的解决方案</title>
    <url>/2020/04/14/2020-04-14-guan-yu-shi-pin-zhong-yong-cv2.imshow-xun-huan-du-qu-tu-pian-wu-fa-xian-shi-de-jie-jue-fang-an/</url>
    <content><![CDATA[<p>需配合cv2.waitkey()使用</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>关于JsDelivr需要注意的地方</title>
    <url>/2020/04/03/2020-04-03-guan-yu-jsdelivr-xu-yao-zhu-yi-de-di-fang/</url>
    <content><![CDATA[<p>今天在使用主题的某个功能的时候，老是失败，调开F12发现403，跳到拒绝访问的网址报错：Package size exceeded the configured limit of 50 MB. Try <del><em><a href="https://github.com/xxxx/xxxxx/xxx.jpg" target="_blank" rel="noopener">https://github.com/xxxx/xxxxx/xxx.jpg</a></em></del> instead，虽然知道字面意思是指包超出了50M，但却不知道是哪里的包太大了，十分无奈，然后百度了一通终于发现原来是release包太大了，所以说还是要尽量减少自己每个release的大小，如果说太大了建议分成几个仓库存放。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>cdn</tag>
        <tag>JsDelivr</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Wordpress固定链接出现404的解决方案</title>
    <url>/2020/04/03/2020-04-03-guan-yu-wordpress-gu-ding-lian-jie-chu-xian-404-de-jie-jue-fang-an/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>   这个困惑了我好几次每次都断断续续折腾我几小时的问题终于被我解决了，首先设置固定连接之前你需要设置好伪静态，我是在宝塔面板上设置的，我反反复复一直以为是我伪静态没有设置好，每次动不动404、500的，快要吐了，回归正题，接下来讲如何解决：</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>   500我就不讲了，在之前的帖子有，而这个404出现的时候我每次都会观察地址栏的链接，看着这一个个中文汉字，不知道为啥，我总是心慌慌的，结果不出我所料，果然是这里出了问题，你啥时候见过地址栏路径出现汉字的，（注意，我说的是路径）而且有一次我把一个分类随意设置了个英文别名，这个分类页面却可以访问，所以我大彻大悟般地把所有的分类都添加了英文别名，结果很显然，可以正常访问！这样既保证了显示中文的需求，又解决了404的文图，岂不美哉，当然，你也可以直接把分类都弄成英文，页面也是同样的道理，哎，经常被一些小问题折腾地死去活来，浪费了我多少宝贵的时间T T</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>404</tag>
      </tags>
  </entry>
  <entry>
    <title>因博主懒，此站停止更新（请跳转至：www.fjct.city）</title>
    <url>/2020/04/02/2020-04-02-yin-bo-zhu-jing-li-you-xian-ci-zhan-ting-zhi-geng-xin-qing-tiao-zhuan-zhi-www.fjct.city/</url>
    <content><![CDATA[<h1 id="Click-here"><a href="#Click-here" class="headerlink" title="Click here!"></a><strong><a href="https://www.fjct.city/">Click here!</a></strong></h1><h1 id="I’m-waiting-for-you…"><a href="#I’m-waiting-for-you…" class="headerlink" title="I’m waiting for you…"></a>I’m waiting for you…</h1><h3 id="2020-4-2："><a href="#2020-4-2：" class="headerlink" title="2020.4.2："></a><strong>2020.4.2：</strong></h3><p>是的，没错，我又回来不定期更新了。。。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>闲时杂谈</category>
      </categories>
      <tags>
        <tag>停更</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda重新安装注意事项</title>
    <url>/2020/03/31/2020-03-31-anaconda-chong-xin-an-zhuang-zhu-yi-shi-xiang/</url>
    <content><![CDATA[<p>这里还是建议安装原来的anaconda版本，以免出现一些冲突，重新安装Anaconda需要注意是否已经把anaconda完全删除干净，注册表是否清理完全（可以借助一些软件），完成这些之后如果在安装过程中出现勾选添加环境变量红字的情况，检查C:\Users\XXX下是否有anaconda的<code>.condarc</code>配置文件，如果有，请把它删除，重新运行安装程序即可发现红字不再显示。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>Github项目-Tf-Pose-Estimation</title>
    <url>/2020/03/31/2020-03-31-github-xiang-mu-tf-pose-estimation/</url>
    <content><![CDATA[<h3 id="1-搭建虚拟环境"><a href="#1-搭建虚拟环境" class="headerlink" title="1.搭建虚拟环境"></a>1.搭建虚拟环境</h3><p>（1）激活环境，先进行下列操作（为了安装requirements.txt的时候不报错）</p>
<pre class="line-numbers language-python"><code class="language-python">pip install Cython
pip install numpy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>注意：后面如果还遇到“No module named xxx”的问题，直接pip install就行</strong></p>
<p>（2）<a href="https://gitee.com/daisf666/cocoapi" target="_blank" rel="noopener">点这里</a>，往下滑，找到下载Visual C++ 2015 build tools的地方，下载完成后选择默认安装，不装的话在安装pycocotools的时候会报错。</p>
<p>（3）cd到文件目录下安装：</p>
<pre><code>pip install -r requirements.txt
pip install opencv-python
pip install tensorflow-gpu==1.13.2 </code></pre><p>（tensorpack）TensorFlow ≥ 1.5, &lt; 2. </p>
<p>（tf-pose-estimation）Tensorflow 1.4.1+</p>
<p>所以我选择了1.13.2，刚好可以和我的cuda10配套使用。</p>
<p>对于requirements.txt我做了如下修改：</p>
<p><img src="http://s1.wailian.download/2020/03/31/Snipaste_2020-03-31_18-44-02.png" alt="Snipaste_2020-03-31_18-44-02.png"></p>
<h3 id="2-编译用于后期处理的C-库"><a href="#2-编译用于后期处理的C-库" class="headerlink" title="2.编译用于后期处理的C++库"></a>2.编译用于后期处理的C++库</h3><p>（1）先下载swig，然后用swig命令去编译<br><a href="http://www.swig.org/download.html" target="_blank" rel="noopener">下载地址</a>    <strong>注意：选择swigwin，因为是windows系统下安装，不要下错了。</strong><br>解压到任意目录，我这里放在C:\swigwin-4.0.1，把该目录加入环境变量path，右键“此电脑”-属性-高级系统设置-环境变量-系统变量-path，例如我是F:\swigwin-4.0.1，添加进path即可。添加完成后打开cmd，输入<code>swig --help</code>查看是否成功。<br>（2）cd tf-pose-estimation/tf_pose/pafprocess/<br>运行：swig -python -c++ pafprocess.i &amp;&amp; python3 setup.py build_ext –inplace</p>
<h3 id="3-模型"><a href="#3-模型" class="headerlink" title="3.模型"></a>3.模型</h3><p>该项目提供的文件有四个：</p>
<ul>
<li>cmu (trained in 656x368)</li>
<li>mobilenet_thin (trained in 432x368)</li>
<li>mobilenet_v2_large (trained in 432x368)</li>
<li>mobilenet_v2_small (trained in 432x368) </li>
</ul>
<p>对于git，CMU的模型太大，因此作者将其上传到外部云中，如果要使用cmu的原始模型，则要自己下载它们，作者在模型文件夹中提供了下载脚本。</p>
<h3 id="4-需要解决的问题"><a href="#4-需要解决的问题" class="headerlink" title="4.需要解决的问题"></a>4.需要解决的问题</h3><p><strong>（1）No module named ‘tensorflow.contrib.tensorrt’</strong></p>
<p>这是我的头号大敌，我快给他整崩溃了，网上到处寻找解决方案无果，改成from xxx 也是不行的，然后我在官网看到<strong>tensorrt在windows下不支持python</strong>，于是我转战我的Ubuntu一顿操作，装了CUAD，Cudnn，Anaconda，Pycharm，开始搭建环境，安装这些东西也出现了一些问题，各种解决，直到<strong>Pre-Install Jetson case</strong>这一步的时候，我始终无法定位到资源包。</p>
<pre><code>$ sudo apt-get install libllvm-7-ocaml-dev libllvm7 llvm-7 llvm-7-dev llvm-7-doc llvm-7-examples llvm-7-runtime
$ export LLVM_CONFIG=/usr/bin/llvm-config-7 </code></pre><p>解决无果，我又回到Win10继续思考，最后没想到只要把\tf-pose-estimation\tf_pose\estimator.py第14行</p>
<p><code>import tensorflow.contrib.tensorrt as trt</code></p>
<p>注释掉就好了，天呐，我醉了。（其实我是在气急败坏的时候把它删了的时候才发现的- -）</p>
<p><strong>（2）UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.</strong></p>
<pre><code>python run_webcam.py --model=mobilenet_thin --resize=432x368 --camera=0</code></pre><p>这一步是通过调用摄像头，按理说应该是没什么问题的，已经初步成功了。</p>
<p>接着识别已经在目录下的图片，执行：</p>
<pre><code>python run.py --model=mobilenet_thin --resize=432x368 --image=./images/p1.jpg</code></pre><p>出现报错：<strong>UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.</strong>解决方法：打开tf-pose-estimation中的run.py文件，将第56行<code>import matplotlib.pyplot as plt</code> 改为：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib
matplotlib<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'TkAgg'</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>（3）执行视频文件时几乎没有骨骼识别的痕迹。</strong></p>
<pre class="line-numbers language-python"><code class="language-python">python run_video<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>model<span class="token operator">=</span>mobilenet_thin <span class="token operator">-</span><span class="token operator">-</span>resolution<span class="token operator">=</span>432x368 <span class="token operator">-</span><span class="token operator">-</span>video<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>etcs<span class="token operator">/</span>dance<span class="token punctuation">.</span>mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行发现，舞者跳舞的时候，没有骨骼识别的痕迹。打开tf-pose-estimation中的run_video.py文件<br>解决办法：<br>（1）添加一段代码</p>
<pre class="line-numbers language-python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--resize-out-ratio'</span><span class="token punctuation">,</span> type<span class="token operator">=</span>float<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">4.0</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'if provided, resize heatmaps before they are post-processed. default=1.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>（2）下方的while cap.isOpened()中humans = e.inference(image)改为：</p>
<pre class="line-numbers language-python"><code class="language-python">humans <span class="token operator">=</span> e<span class="token punctuation">.</span>inference<span class="token punctuation">(</span>image<span class="token punctuation">,</span> resize_to_default<span class="token operator">=</span><span class="token punctuation">(</span>w <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> h <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> upsample_size<span class="token operator">=</span>args<span class="token punctuation">.</span>resize_out_ratio<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="到此所有问题都解决了-真是不容易啊，欧拉欧拉欧拉欧拉欧拉"><a href="#到此所有问题都解决了-真是不容易啊，欧拉欧拉欧拉欧拉欧拉" class="headerlink" title="到此所有问题都解决了,真是不容易啊，欧拉欧拉欧拉欧拉欧拉~~~"></a><em>到此所有问题都解决了,真是不容易啊，欧拉欧拉欧拉欧拉欧拉~~~</em></h3><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Github项目</category>
      </categories>
      <tags>
        <tag>tf-pose</tag>
      </tags>
  </entry>
  <entry>
    <title>如何设置首页阅读更多按钮</title>
    <url>/2020/03/29/2020-03-29-ru-he-she-zhi-shou-ye-yue-du-geng-duo-an-niu/</url>
    <content><![CDATA[<p>通常我们需要在主页上显示文章的某些部分，然后提供指向完整文章的链接。 NexT提供了两种方法来控制文章在首页中的显示方式，你可以使用以下方式显示文章摘要和“更多信息”按钮。</p>
<p>1.Hexo建议在文章中使用&lt;!– more –&gt;手动中断文章。使用&lt;!– more –&gt;，不仅可以控制要显示的内容，还可以让Hexo的插件轻松使用它。</p>
<p>2.如果你已在Front-matter中添加了描述并将其值设置为文章摘要，则默认情况下，NexT会将描述摘录为首页中的前导文本。 如果没有描述，则全部内容将为首页中的前导文字。你可以通过在主题配置文件中将excerpt_description的值设置为false来禁用它。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>阅读更多</tag>
      </tags>
  </entry>
  <entry>
    <title>目前设置Next主题访问人数显示正常可行的方法</title>
    <url>/2020/03/28/2020-03-28-mu-qian-she-zhi-next-zhu-ti-fang-wen-ren-shu-xian-shi-zheng-chang-ke-xing-de-fang-fa/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>刚开始照着几篇博文完善了一下next主题的插件功能，唯有显示阅读人数让我头疼不已，设置了半天都显示不正常，数字那块老是空着，百度了许久也未能找出成功解决的方法，而且看到许多朋友也是显示不正常，但碰巧有一次看见人家显示得好好的就纳闷了，调了下审查元素，发现用的是busuanzi，我之前设置的都是用的<a href="http://link.zhihu.com/?target=https%3A//leancloud.cn/">leancloud</a>，还得自己去注册设置api，然后就想试试也用busuanzi。<a id="more"></a></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>打开主题配置文件，找到busuanzi_count，enable改为true,注意那几个false，不关掉会和代码冲突</p>
<pre><code>busuanzi_count:
  enable: true
  total_visitors: false
  total_visitors_icon: user
  total_views: false
  total_views_icon: eye
  post_views: true
  post_views_icon: eye</code></pre><p>打开/blog/themes/next/layout/_partials/footer.swig 在文件底部添加下面的代码:</p>
<pre><code>&lt;div&gt;
&lt;div class="powered-by"&gt;
&lt;i class="fa fa-user-md"&gt;&lt;/i&gt;
&lt;span id="busuanzi_container_site_uv"&gt;
  本站总访客数:&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;| 
&lt;/span&gt;
&lt;span id="busuanzi_container_site_pv"&gt;
    &amp;nbsp;本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次
&lt;/span&gt;
&lt;/div&gt;</code></pre><ul>
<li><h2 id="2020-4-21更新代码"><a href="#2020-4-21更新代码" class="headerlink" title="2020.4.21更新代码"></a>2020.4.21更新代码</h2></li>
<li><pre><code>&lt;!-- 不蒜子统计 --&gt;
&lt;span &gt;
        本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次
&lt;/span&gt;
&lt;span class="post-meta-divider"&gt;|&lt;/span&gt;
&lt;span &gt;
         本站访客数&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;人
&lt;/span&gt;
&lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</code></pre></li>
</ul>
<p>打开/blog/themes/next/layout/_macro/post.swig,在该添加<code>&lt;span&gt;°C&lt;/span&gt;</code>以显示℃</p>
<p><a href="https://www.wailian.work/image/ABC8d5" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/03/28/Snipaste_2020-03-28_02-03-23.png" alt="Snipaste_2020-03-28_02-03-23.png"></a></p>
<ul>
<li><h2 id="2020-4-21更新"><a href="#2020-4-21更新" class="headerlink" title="2020.4.21更新"></a>2020.4.21更新</h2></li>
<li><p>要想在文章中正常显示阅读数还需要将上图中的代码改至如下:</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/04/21/CZ1FeOqPQbHpvwo.png" alt="Snipaste_2020-04-21_23-37-43.png"></p>
<ul>
<li>删除了部分代码，或者使用valine，但尽量用一个，避免冲突。</li>
</ul>
<p>然后打开，/blog/themes/next/languages/zh-CN.yml,找到views: ，后面改成热度（记得空格）</p>
<p>这里提醒一下，如果评论显示英文Valine，也在这个文件下改，具体找到post，添加如下代码：</p>
<p><a href="https://www.wailian.work/image/ABCLcp" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/03/28/Snipaste_2020-03-28_02-08-28.png" alt="Snipaste_2020-03-28_02-08-28.png"></a></p>
<p>最后，记得把主题配置文件里的leancloud_visitors:改为false，否则就会显示两个热度，且一个为空。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>hexo,next,访问人数</tag>
      </tags>
  </entry>
  <entry>
    <title>Wordpress文章迁移到hexo</title>
    <url>/2020/03/27/2020-03-27-wordpress-wen-zhang-qian-yi-dao-hexo/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>虽然github被墙让我一度想放弃双更的想法，但在Coding托管之后我又有了在这继续写博文的动力了，首先就是要把wordpress的文章移植过来，下面主要讲下具体过程。<a id="more"></a></p>
<h3 id="1-wordpress导出文章"><a href="#1-wordpress导出文章" class="headerlink" title="1.wordpress导出文章"></a>1.wordpress导出文章</h3><p>进入woedpress后台，选择工具下的导出菜单，下载导出的文件。</p>
<p><img src="http://s1.wailian.download/2020/03/27/wordprss.png" alt="wordprss.png"></p>
<h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h3><pre><code>npm install hexo-migrator-wordpress --save</code></pre><h3 id="3-转换"><a href="#3-转换" class="headerlink" title="3.转换"></a>3.转换</h3><pre><code>hexo migrate wordpress &lt;source&gt;</code></pre><p><code>source</code> 可以是 WordPress 导出的文件路径或网址。</p>
<p>这里需要注意的是，复制文件路径时要把”\“改为“/”，否则会识别不了路径，从而找不到文件。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>wordpress转hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Github项目-OpenMMD</title>
    <url>/2020/03/26/2020-03-26-github-xiang-mu-openmmd/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间一直在研究<a href="https://github.com/CMU-Perceptual-Computing-Lab/openpose" target="_blank" rel="noopener">Openpose</a>，一直在想是不是有办法能够把视频当中人的动作提取出来从而建立到虚拟环境中，刚好在机缘巧合之下，在Github发现了<a href="https://github.com/peterljq/OpenMMD" target="_blank" rel="noopener">OpenMMD</a>这个项目,于是动手实操了一下。<a id="more"></a></p>
<h2 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h2><p>首先去项目下找到需要下载模型文件（4~5G）</p>
<p>1、Python</p>
<p>2、Tensorflow（1.13.1）ps：为加快速度可选gpu版本，不过要注意和cuda、cudnn、NVIDIA显卡型号和驱动版本的一一对应关系，2.0会报错：AttributeError：module tensorflow no attribute app</p>
<p>3、h5py</p>
<p>4、matplotlib（3.0.0）</p>
<p>5、pyqt5</p>
<p>6、opencv-python</p>
<p>以上建议在虚拟环境下操作~</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>首先，解决源码自身问题：</p>
<p>1、把VMD-3d-pose-baseline-mult/born/あにまさ式ミクボーン.csv这个文件修改成一个英文名字，比如miku_bone.csv，之后还需要同步修改下3DToVmd.bat文件的第18行，也是把</p>
<pre><code>set MODEL_BONE_CSV=born\あにまさ式ミクボーン.csv</code></pre><p>里面的日文改成你刚才起的名字（miku_bone.csv）。（解决encoding找不到乱码csv文件的问题）</p>
<p>2、删掉3DToVmd.bat文件最后一行里的’-s %SMOOTH_TIMES%’ 。</p>
<p>（解决unrecognized arguments: -s 1问题）</p>
<p>开始操作：</p>
<p>1、激活虚拟环境</p>
<p>2、CMD cd 到 OpenposeVideo.bat 文件目录下，运行（可拖拽），看到“input path：”时，把源视频文件拖进去，输入最大人数，一路回车，这时会启动openpose程序一帧一帧的分析视频，从而生成xxx.avi视频和_json文件夹。</p>
<p>3、运行VMD-3d-pose-baseline-multi文件下的OpenposeTo3D.bat，拖入_json文件夹，一路回车，此时会生成形如_json_3d_20200326_015958_idx01的文件夹.</p>
<p>4、运行FCRN-DepthPrediction-vmd目录下的VideoToDepth.bat，拖入原视频，拖入_json_3d_20200326_015958_idx01，回车。</p>
<p>5、运行VMD-3d-pose-baseline-mult目录下的3DToVMD.bat，拖入_json_3d_20200326_015958_idx01文件夹，回车，完成后会在_json_3d_20200326_015958_idx01文件夹中成功生成vmd文件。</p>
<p>6、打开mmd，拖入pmd/pmx人物模型文件，接着拖入vmd即可。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Github项目</category>
      </categories>
      <tags>
        <tag>openpose，openmmd</tag>
      </tags>
  </entry>
  <entry>
    <title>解决超链接设置原窗口打开仍在新标签页中打开的问题</title>
    <url>/2020/03/26/2020-03-26-jie-jue-wordpress-chao-lian-jie-she-zhi-yuan-chuang-kou-da-kai-reng-zai-xin-biao-qian-ye-zhong-da-kai-de-wen-ti/</url>
    <content><![CDATA[<p>打开文本，将https改为http即可</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>超链接</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm进入创建的虚拟环境-Win10+Ubuntu</title>
    <url>/2020/03/25/2020-03-25-pycharm-jin-ru-chuang-jian-de-xu-ni-huan-jing/</url>
    <content><![CDATA[<p><strong>Windows：</strong>想偷懒直接在创建的虚拟环境目录下的Scripts下右键打开shell，输入activate激活，发现不行，后面用cmd cd进文件夹才能激活成功。</p>
<p><strong>Ubuntu：</strong>cd 到虚拟环境目录下，打开终端，输入：</p>
<pre><code>source bin/activate</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>虚拟环境，Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter Notebook 的快捷键</title>
    <url>/2020/03/25/2020-03-25-jupyter-notebook-de-kuai-jie-jian/</url>
    <content><![CDATA[<h2 id="1-Jupyter-Notebook服务启动与停止"><a href="#1-Jupyter-Notebook服务启动与停止" class="headerlink" title="1.Jupyter Notebook服务启动与停止"></a><strong>1.Jupyter Notebook服务启动与停止</strong></h2><p>环境为Windows10系统<br>首先进入命令提示符cmd，用cd命令切换到工作目录，这里不做详细解释，可自行百度<br>键入命令jupyter notebook <a id="more"></a><br>之后Jupyter Notebook服务就会启动，并在电脑默认浏览器里打开首页并显示当前工作目录的文件<br>在命令提示符窗口使用Control-C停止服务，双击则跳过确认 </p>
<h2 id="2-Jupyter-Notebook-的两种键盘输入模式"><a href="#2-Jupyter-Notebook-的两种键盘输入模式" class="headerlink" title="2.Jupyter Notebook 的两种键盘输入模式"></a><strong>2.Jupyter Notebook 的两种键盘输入模式</strong></h2><p>编辑模式，允许你往单元中键入代码或文本；这时的单元框线是绿色的。命令模式，键盘输入运行程序命令；这时的单元框线是灰色。 </p>
<h3 id="命令模式-按键-Esc-开启"><a href="#命令模式-按键-Esc-开启" class="headerlink" title="命令模式 (按键 Esc 开启)"></a><strong>命令模式 (按键 Esc 开启)</strong></h3><p>Enter : 转入编辑模式<br>Shift-Enter : 运行本单元，选中下个单元<br>Ctrl-Enter : 运行本单元<br>Alt-Enter : 运行本单元，在其下插入新单元<br>Y : 单元转入代码状态<br>M :单元转入markdown状态<br>R : 单元转入raw状态<br>1 : 设定 1 级标题<br>2 : 设定 2 级标题<br>3 : 设定 3 级标题<br>4 : 设定 4 级标题<br>5 : 设定 5 级标题<br>6 : 设定 6 级标题<br>Up : 选中上方单元<br>K : 选中上方单元<br>Down : 选中下方单元<br>J : 选中下方单元<br>Shift-K : 扩大选中上方单元<br>Shift-J : 扩大选中下方单元<br>A : 在上方插入新单元<br>B : 在下方插入新单元<br>X : 剪切选中的单元<br>C : 复制选中的单元<br>Shift-V : 粘贴到上方单元<br>V : 粘贴到下方单元<br>Z : 恢复删除的最后一个单元<br>D,D : 删除选中的单元<br>Shift-M : 合并选中的单元<br>Ctrl-S : 文件存盘<br>S : 文件存盘<br>L : 转换行号<br>O : 转换输出<br>Shift-O : 转换输出滚动<br>Esc : 关闭页面<br>Q : 关闭页面<br>H : 显示快捷键帮助<br>I,I : 中断Notebook内核<br>0,0 : 重启Notebook内核<br>Shift : 忽略<br>Shift-Space : 向上滚动<br>Space : 向下滚动 </p>
<h3 id="编辑模式-Enter-键启动"><a href="#编辑模式-Enter-键启动" class="headerlink" title="编辑模式 ( Enter 键启动)"></a><strong>编辑模式 ( Enter 键启动)</strong></h3><p>Tab : 代码补全或缩进<br>Shift-Tab : 提示<br>Ctrl-] : 缩进<br>Ctrl-[ : 解除缩进<br>Ctrl-A : 全选<br>Ctrl-Z : 复原<br>Ctrl-Shift-Z : 再做<br>Ctrl-Y : 再做<br>Ctrl-Home : 跳到单元开头<br>Ctrl-Up : 跳到单元开头<br>Ctrl-End : 跳到单元末尾<br>Ctrl-Down : 跳到单元末尾<br>Ctrl-Left : 跳到左边一个字首<br>Ctrl-Right : 跳到右边一个字首<br>Ctrl-Backspace : 删除前面一个字<br>Ctrl-Delete : 删除后面一个字<br>Esc : 进入命令模式<br>Ctrl-M : 进入命令模式<br>Shift-Enter : 运行本单元，选中下一单元<br>Ctrl-Enter : 运行本单元<br>Alt-Enter : 运行本单元，在下面插入一单元<br>Ctrl-Shift– : 分割单元<br>Ctrl-Shift-Subtract : 分割单元<br>Ctrl-S : 文件存盘<br>Shift : 忽略<br>Up : 光标上移或转入上一单元<br>Down :光标下移或转入下一单元 </p>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p>1.<a href="https://blog.csdn.net/QimaoRyan/article/details/76022038" target="_blank" rel="noopener">https://blog.csdn.net/QimaoRyan/article/details/76022038</a><br>2.<a href="https://blog.csdn.net/lawme/article/details/51034543" target="_blank" rel="noopener">https://blog.csdn.net/lawme/article/details/51034543</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装NVIDIA显卡驱动</title>
    <url>/2020/03/24/2020-03-24-ubuntu-an-zhuang-nvidia-xian-qia-qu-dong/</url>
    <content><![CDATA[<h2 id="废话不多少，直接开干！"><a href="#废话不多少，直接开干！" class="headerlink" title="废话不多少，直接开干！"></a>废话不多少，直接开干！</h2><h4 id="1、禁用nouveau"><a href="#1、禁用nouveau" class="headerlink" title="1、禁用nouveau"></a>1、禁用nouveau</h4><p>ubuntu 默认安装了第三方开源的驱动程序nouveau，安装nvidia显卡驱动要先禁用nouveau，不然会冲突，导致无法安装。打开终端输入：<a id="more"></a></p>
<pre class="line-numbers language-html"><code class="language-html">sudo gedit /etc/modprobe.d/blacklist.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>打开文件，在最末尾添加：  </p>
<p>blacklist nouveau<br>options nouveau modeset=0</p>
<h4 id="2、输入以下代码并重启"><a href="#2、输入以下代码并重启" class="headerlink" title="2、输入以下代码并重启"></a>2、输入以下代码并重启</h4><pre><code>sudo update-initramfs -u </code></pre><h4 id="3、验证nouveau是否已禁用"><a href="#3、验证nouveau是否已禁用" class="headerlink" title="3、验证nouveau是否已禁用"></a>3、验证nouveau是否已禁用</h4><pre><code>lsmod | grep nouveau</code></pre><p>如果没有出现任何东西就是成功了。  </p>
<h4 id="4、下载驱动并安装"><a href="#4、下载驱动并安装" class="headerlink" title="4、下载驱动并安装"></a>4、下载驱动并安装</h4><pre><code>4.1、在英伟达的[官网](https://www.geforce.cn/drivers)上下载相应的驱动，下载后拷贝至home目录下，文件为：NVIDIA-Linux-x86_64-xxx.xx.run  
4.2 、按ctrl+alt+f1进入命令行界面，此时需要login：电脑账户名称，password：密码，登录。当登录失败，出现incorrect login时 ，可以按下ctrl+alt+F2(F4)等进入，重新login即可。  

4.3、 关闭图形界面</code></pre><pre><code>sudo service lightdm stop </code></pre><pre><code>4.4、卸载系统中默认安装的NVIDIA驱动  </code></pre><pre><code> sudo apt-get remove nvidia-*  </code></pre><pre><code>4.5、 给文件权限</code></pre><pre><code>sudo chmod  a+x NVIDIA-Linux-x86_64-xxx.run </code></pre><pre><code>4.6、  安装</code></pre><pre><code> sudo ./NVIDIA-Linux-x86_64-xxx.run -no-x-check -no-nouveau-check -no-opengl-files</code></pre><p>其中：</p>
<p>-no-x-check：安装驱动时关闭X服务  </p>
<p>-no-nouveau-check：安装驱动时禁用nouveau  </p>
<p>-no-opengl-files：只安装驱动文件，不安装OpenGL文件  </p>
<p>在安装过程中出现（其他只能点ok的点ok就好了）：  </p>
<pre><code>    1、he distribution-provided pre-install script failed! Are you sure you want to continue?  选择 yes 继续。  

    2、Would you like to register the kernel module souces with DKMS? This will allow DKMS to automatically build a new module, if you install a different kernel later?  选择NO继续  


    3、Would you like to run the nvidia-xconfigutility to automatically update your x configuration so that the NVIDIA x driver will be used when you restart x? Any pre-existing x confile will be backed up.  选择 Yes继续

4.7、 安装成功后，需要重启图形界面，在命令行输入：</code></pre><pre><code>sudo service lightdm start  </code></pre><pre><code>4.8、按Ctrl+Alt+F7返回图形界面

4.9、检测是否安装成功</code></pre><pre><code>nvidia-smi 
nvidia-setting</code></pre><p>​    成功跳出相关信息，就代表驱动安装好了。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>NVIDIA驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>解决“Error-No-Such-Device-Xxx-Xxx-Entering-Rescue-Mode-Grub-Rescue mode... Grub Rescue &gt;”问题</title>
    <url>/2020/03/23/2020-03-23-jie-jue-error-no-such-device-xxx-xxx-entering-rescue-mode-grub-rescue-wen-ti/</url>
    <content><![CDATA[<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1、插上装有Ubuntu系统的U盘，选择try Ubuntu，进入Ubuntu系统;</p>
<p>2、联网;</p>
<p>3、打开终端，输入如下代码:<a id="more"></a></p>
<pre class="line-numbers language-html"><code class="language-html">sudo -i  #root账户
add-apt-repository ppa:yannubuntu/boot-repair &amp;&amp; apt-get update  #添加软件源并更新
apt-get install -y boot-repair &amp;&amp; boot-repair  #安装boot-repair并启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>4、点击第一个，推荐修复</p>
<p>5、跟着操作提示走，点击yes，选择grub安装分区等等。</p>
<p>6、重启</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>grub</tag>
      </tags>
  </entry>
  <entry>
    <title>双系统Ubuntu16.04桌面卡顿解决方案</title>
    <url>/2020/03/23/2020-03-23-shuang-xi-tong-ubuntu16.04-zhuo-mian-qia-dun-jie-jue-fang-an/</url>
    <content><![CDATA[<p>​        博主刚安装完Ubuntu16.04，一通设置重启等待效果的时候突然发现桌面非常卡，每次一操作都要等一会，都是从上往下刷新，还有残影，就跟ppt设置的动画一样，顿时百思不得其解，网上都是重装驱动就可以解决，可是这么卡，我一秒也不想操作，更不要说装驱动这么麻烦的事了，于是如下：<a id="more"></a></p>
<ol>
<li>关机重启，选择Ubuntu高级选项，进入recovery模式，选择第一个：resume nomoral boot，点击OK进入。（这是我的一次偶然发现，我就好奇了，明明是恢复正常启动，为什么这种状态下操作系统就不会卡了，这个时候启动和关闭Ubuntu都会出现一堆低分辨率看起来hacker感十足的代码，请不要怕，正常操作）</li>
<li>安装英伟达最新驱动（比较复杂，见另外一贴）</li>
<li>关机切换为普通Ubuntu重启</li>
</ol>
<p>​        你以为事情就这么结束了吗，No！！！只要不是在recovery mode下进入的，依旧卡顿！！！我带着崩溃的心快绝望了，网上也找不到什么好的解决方法，作为小白也不敢胡乱尝试，然而在一次机缘巧合之下，<strong>博主更新了内核，从16.04.45升级到了16.04.91（直接在软件仓库打开可升级的软件更新系统就好了）</strong>，就发现问题依然解决，这与驱动丝毫无关！！！因为使用更新后的内核进入，博主发现驱动用的还是默认的，所以说更新了内核是会让英伟达驱动失效的，于是博主又重装英伟达驱动，毕竟下了嘛，不装白不装。。。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu卡顿</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu双系统grub启动项无win10选项</title>
    <url>/2020/03/23/2020-03-23-ubuntu-shuang-xi-tong-grub-qi-dong-xiang-wu-win10-xuan-xiang/</url>
    <content><![CDATA[<p>很简单，进入Ubuntu更新下grub即可</p>
<pre class="line-numbers language-html"><code class="language-html">sudo update-grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>grub，win10启动项</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu双系统解决切换win10下系统时间不对的问题</title>
    <url>/2020/03/23/2020-03-23-ubuntu-shuang-xi-tong-jie-jue-qie-huan-win10-xia-xi-tong-shi-jian-bu-dui-de-wen-ti/</url>
    <content><![CDATA[<p><strong>原因：</strong></p>
<p>Windows认为BIOS时间是本地时间，Ubuntu认为BIOS时间是UTC时间，UTC相当于本初子午线(即经度0度)上的平均太阳时，过去曾用格林威治平均时(GMT)来表示，北京时间比UTC时间早8小时，所以会有冲突。<a id="more"></a></p>
<p><strong>解决方案：</strong></p>
<pre class="line-numbers language-html"><code class="language-html">sudo apt-get install ntpdate
sudo ntpdate time.windows.com  #更新时间，确保无误
sudo hwclock --localtime --systohc  #将时间更新到硬件上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>我第一次重新进入windows10，发现时间仍然异常，再次重启即正常。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>win10时间错乱</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu更改Win10为默认启动项</title>
    <url>/2020/03/23/2020-03-23-ubuntu-geng-gai-win10-wei-mo-ren-qi-dong-xiang/</url>
    <content><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>​        一般人用Ubuntu可能只是偶尔需要，大多数时候还是会在windows系统下学习工作的，所以为了避免有时候开机忘记更改启动项默认启动Ubuntu的情况，更改win10为默认启动项还是很有必要的。<a id="more"></a></p>
<h4 id="设置方法："><a href="#设置方法：" class="headerlink" title="设置方法："></a>设置方法：</h4><p>进入ubuntu系统,打开终端</p>
<pre class="line-numbers language-html"><code class="language-html">cd /etc/default #进入default目录

sudo gedit grub #打开grub配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>将GRUB_DEFAULT=0修改为你想要默认启动的系统的序号，从0开始由上往下，设置完后保存</p>
<p>最后记得更新  </p>
<pre class="line-numbers language-html"><code class="language-html"> sudo update-grub <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重启，完工。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>grub,win10启动项</tag>
      </tags>
  </entry>
  <entry>
    <title>安装完Ubuntu建议做的几件事</title>
    <url>/2020/03/23/2020-03-23-an-zhuang-wan-ubuntu-jian-yi-zuo-de-ji-jian-shi/</url>
    <content><![CDATA[<h4 id="1-关掉sudo的密码"><a href="#1-关掉sudo的密码" class="headerlink" title="1.关掉sudo的密码"></a>1.关掉sudo的密码</h4><pre class="line-numbers language-html"><code class="language-html">sudo visudo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>找到</p>
<p>%sudo   ALL=(ALL:ALL) ALL</p>
<p>改成</p>
<p>%sudo   ALL=(ALL:ALL) NOPASSWD:ALL</p>
<p>这样所有sudo组内的用户使用sudo时就不需要密码了。  <a id="more"></a></p>
<h4 id="2-修改默认编辑器"><a href="#2-修改默认编辑器" class="headerlink" title="2.修改默认编辑器"></a>2.修改默认编辑器</h4><pre class="line-numbers language-html"><code class="language-html">sudo update-alternatives --config editor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>选择你想用的，输入对应序号就可以了。</p>
<h3 id="3-apt更换源"><a href="#3-apt更换源" class="headerlink" title="3.apt更换源"></a>3.apt更换源</h3><p>首先，先进行备份（好习惯）</p>
<pre class="line-numbers language-html"><code class="language-html">cd /etc/apt
sudo cp sources.list sources.list.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后，修改sources.list</p>
<pre class="line-numbers language-html"><code class="language-html">sudo gedit sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>全选清空，粘贴你想要的源保存退出就好了</p>
<p>最后不要忘了更新</p>
<pre class="line-numbers language-html"><code class="language-html">sudo apt-get update  #更新本地索引列表
sudo apt-get upgrade  #根据更新的索引升级已安装的所有软件包（可选）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>ps：还有一种最简单的方式，左上角搜索“软件和更新”，点击中国站点，选择其他源，先自动测速最快源，等一段时间选择最优结果，确定即可。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装完成后建议安装的几个软件（附安装教程）</title>
    <url>/2020/03/23/2020-03-23-ubuntu-an-zhuang-wan-cheng-hou-jian-yi-an-zhuang-de-ji-ge-ruan-jian-fu-an-zhuang-jiao-cheng/</url>
    <content><![CDATA[<p><strong>1.搜狗输入法</strong></p>
<p>官网下载相应版本安装即可。</p>
<p><strong>2.Google Chrome 浏览器</strong></p>
<p>官网下载相应版本安装即可。<a id="more"></a></p>
<p><strong>3.Ubuntu Cleaner</strong></p>
<p>Ubuntu Cleaner 是一个系统管理工具，其被特别设计用来移除不再使用的包、不需要的应用和清理浏览器缓存。Ubuntu Cleaner 有易于使用的简单用户界面。</p>
<p>安装方式：</p>
<pre class="line-numbers language-html"><code class="language-html"> sudo add-apt-repository ppa:gerardpuig/ppa
 sudo apt-get update
 sudo apt-get install ubuntu-cleaner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>4.Vim</strong></p>
<p>Vim 是一个集成开发环境，你可以以一个独立应用或 CLI 程序使用它，用于各种像 Python 等主流编程语言的编程。大多数程序员喜欢在 Vim 中编写代码，因为它快速并且是一个可高度定制的集成开发环境。最初你可能觉得有点难用，但你会很快习惯它。</p>
<p>安装方式：</p>
<pre class="line-numbers language-html"><code class="language-html"> sudo apt-get install vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>5.咖啡因</strong></p>
<p>想象一下你在 Youtube 上看视频或阅读一篇新文章，突然你的 Ubuntu 锁屏了，我知道它很烦人。我们很多人都会遇到这种情况，所以咖啡因是一个阻止 Ubuntu 锁屏或屏幕保护程序的工具。咖啡因指示器是一个轻量级的工具，它添加图标到通知栏，你可以在那里轻松的激活或禁止它。不需要额外的设置。</p>
<p>安装方式：</p>
<pre class="line-numbers language-html"><code class="language-html"> sudo add-apt-repository ppa:eugenesan/ppa
 sudo apt-get update
 sudo apt-get install caffeine -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>6.Neofetch</strong></p>
<p>Neofetch 是一个酷炫的系统信息工具，通过在终端中运行 neofetch 命令，它会给你关于你的系统的所有信息。它酷是因为它可以给你关于桌面环境、内核版本、bash 版本和你正在运行的 GTK 主题的信息。与其它系统信息工具比较，Nefetch 是高度自定义的工具。你可以使用命令行进行各种自定义。</p>
<p>安装方式：</p>
<pre class="line-numbers language-html"><code class="language-html"> sudo add-apt-repository ppa:dawidd0811/neofetch
 sudo apt-get update
 sudo apt-get install neofetch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>7.gnome-tweak</strong></p>
<p>这里主要是改主题和DPI用，调DPI的话就是调字体中的缩放比例，我调的是1.25，和Windows物理机的配置是一样的。</p>
<p>安装方式：</p>
<pre class="line-numbers language-html"><code class="language-html">sudo apt install gnome-tweak-tool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>8.ros（博主个人需求，可无视）</strong></p>
<p>参考：<a href="https://www.cnblogs.com/liu-fa/p/5779206.html" target="_blank" rel="noopener">https://www.cnblogs.com/liu-fa/p/5779206.html</a></p>
<p>注意：ros更换清华源或中科大源可能会报错，建议还是用官方的。</p>
<p><strong>9.redshift</strong></p>
<p>护眼神器，其实只需要一个redshift的desktop版本，他会下载一个desktop的程序图标让你容易打开。</p>
<p>安装方式：</p>
<pre class="line-numbers language-html"><code class="language-html">sudo apt-get install redshift-gtk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>10.7-zip</strong></p>
<p>p7zip：包含7zr（最小的7zip归档工具），仅仅只能处理原生的7z格式。</p>
<p>p7zip-full：包含7z，支持7z、LZMA2、XZ、ZIP、CAB、GZIP、BZIP2、ARJ、TAR、CPIO、RPM、ISO和DEB格式。</p>
<p>p7zip-rar：包含一个能解压RAR文件的插件。</p>
<p>建议安装p7zip-full包（不是p7zip），因为这是最完全的7zip程序包，它支持很多归档格式。此外，如果想处理RAR文件话，还需要安装p7zip-rar包，做成一个独立的插件包的原因是因为RAR是一种专有格式。当然也可以三者都装。</p>
<p>安装方式：</p>
<pre class="line-numbers language-html"><code class="language-html">sudo apt-get install p7zip-rar
sudo apt-get install p7zip-full
sudo apt-get install p7zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>ps：这里我只输入了第一行代码就顺便自动下载了full版。但是提取rar时会出现utf-8中文乱码错误，故参照：<a href="https://jingyan.baidu.com/article/7f766daff281c84101e1d08d.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/7f766daff281c84101e1d08d.html</a> 得以解决。</p>
<p><strong>11.Anaconda</strong></p>
<p><a href="https://repo.anaconda.com/archive/" target="_blank" rel="noopener">官方地址</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">清华大学镜像</a><br>这里需要注意的地方是，Anaconda对应的python版本需要自己查阅清楚，3.6的对应的是 Anaconda 5.2，其他的我还没试过，网上查一下可以找到，可以参考一下。<br>下载完成后，输入以下命令：</p>
<pre><code> bash Anaconda3-5.2.0-Linux-x86_64.sh</code></pre><p>安装过程中会提示选择安装路径和是否加入环境变量，安装完成后记得更改pip为国内源。</p>
<p>具体操作：</p>
<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --set show_channel_urls yes</code></pre><p>打开~/.condarc文件, 应该是如下内容</p>
<pre><code>channels:
    - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
    - defaults #把此行删掉保存即可
show_channel_url: true
</code></pre><p><strong>12.Pycharm</strong></p>
<p><a href="https://www.jetbrains.com/pycharm/download/#section=linux" target="_blank" rel="noopener">官网地址</a></p>
<p>下载完成后解压，进入PyCharm文件包中的bin目录中，输入：</p>
<pre><code>sh pycharm.sh</code></pre><p>根据提示安装即可，为了每次打开pycharm方便，我们可以创建一个快捷方式，具体参考：<a href="https://blog.csdn.net/jpch89/article/details/81739176" target="_blank" rel="noopener">https://blog.csdn.net/jpch89/article/details/81739176</a></p>
<p><strong>13.aptitude</strong></p>
<pre><code> aptitude 是 Debian GNU/Linux 系统中, 非常神奇的的软件包管理器,基于大名鼎鼎的 APT 机制, 整合了 dselect 和 apt-get的所有功能, 并提供的更多特性,特别是在依赖关系处理上。</code></pre><p>　 aptitude与 apt-get 一样，是 Debian 及其衍生系统中功能极其强大的包管理工具。与 apt-get 不同的是，aptitude在处理依赖问题上更佳一些。举例来说，aptitude在删除一个包时，会同时删除本身所依赖的包。这样，系统中不会残留无用的包，整个系统更为干净。<br>安装方式：</p>
<pre><code>sudo apt-get install aptitude</code></pre><p>具体使用方法可以参考百度。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu软件</tag>
      </tags>
  </entry>
  <entry>
    <title>花了两天时间体验了一下Hexo</title>
    <url>/2020/03/23/2020-03-23-hua-liao-liang-tian-shi-jian-ti-yan-liao-yi-xia-hexo/</url>
    <content><![CDATA[<p>这两天尝试了下用hexo+github方法搭建博客，<a href="https://daisf666.github.io" target="_blank" rel="noopener"><strong>点击参观</strong></a>(有框架，无内容，好了被墙了)，总体来说，有优点也有缺点，站在我这个<strong>行外人士</strong>来分析的话，如下：<a id="more"></a></p>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong><em>优点：</em></strong></h3><p>1.不需要服务器或虚拟主机，甚至不需要域名。</p>
<p>2.非常单纯和轻量化的博客系统。</p>
<p>3.<del>GitHub上有非常多的主题和插件支持，安装起来非常方便</del>（好像都差不多）。</p>
<p>4.写文章的时候直接一句命令就可以开始写。</p>
<p>5.第一次加载会很慢，但是之后就飞快，毕竟是采用静态页面的方式。</p>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><em><strong>缺点：</strong></em></h3><p>1.每次更新网站都需要重新部署，每次改了配置想看效果都比较麻烦。</p>
<p>2.<del>写文章采用的是Markdown编辑器，即使有可视化编辑器也没有平常大家用的编辑器用起来方便，不过熟了会非常爽，总之，对小白非常不友好</del>放屁，建议大家一定要花点时间学，写两三篇就熟练了，怎么会有这么好的编辑器，懒果然是阻止你接触美好事物的一道坎。</p>
<p>3.只能在本机上操作网站，不过也有大佬可以在其它电脑上操作，但是也要一系列的操作。。。</p>
<p>4.设置网站采用的也都是文本编辑，修改起来虽然不难，但也挺费神的，要拼命折腾的话，还是适合有一定web代码基础的（好像在哪都试用）。</p>
<p>5.毕竟服务器不是自己的，说不定哪天就被墙了。</p>
<p>下面给大家提供具体的搭建方法，百度上Linux的一大片，这里就分享个win10的，传送门：</p>
<p><a href="https://yremp.live/win10-install-hexo/" target="_blank" rel="noopener">https://yremp.live/win10-install-hexo/</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>闲时杂谈</category>
      </categories>
      <tags>
        <tag>hexo，github，博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+coding外加GitHub双线部署</title>
    <url>/2020/03/22/2020-03-22-hexo-github-coding-shuang-xian-bu-shu/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>也许有人会问，为啥一个博客要部署那么多，部署一个不就得了，yes，我起初就是这么想的，可是到后来我发现我部署在github的网站打不开了，应该是被墙了，所以只好也在国内代码托管平台部署一个了，我这里以coding为例，此文是建立在已经部署完GitHub的前提下，增加Coding部署的方法。<a id="more"></a></p>
<h2 id="Coding注册"><a href="#Coding注册" class="headerlink" title="Coding注册"></a>Coding注册</h2><p>​    打开<a href="https://coding.net/" target="_blank" rel="noopener" title="官网">Coding官网</a>，注册，然后创建一个代码托管项目，填下项目名称创建即可，接着要注意的地方是在新版的coding当中,“静态page”要自己手动开启“功能开关“中的“构建与部属”（<strong>2020.4.22更新为“持续部署”</strong>），我找这个就找了半天，然后点开项目发现在网页的左下角的“项目设置”，天呐，真是太不人性化了，谁没事往那边瞅啊，太容易被浏览器的状态信息给遮挡了，点开之后照我上面说的打开“构建与部属”，之后你就会在左侧菜单栏的“构建与部属”中找到“静态网站”了，创建之前会提示你进行实名认证。新版的coding会随机给你生成一个域名，所以不要自己设置，不喜欢的话尽快申请一个自己的域名吧。</p>
<p><img src="https://img-blog.csdnimg.cn/20200326213523893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTk0MzY4,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p>
<h2 id="添加公匙"><a href="#添加公匙" class="headerlink" title="添加公匙"></a>添加公匙</h2><p>进入该项目的“代码仓库“，进入“仓库设置”，点击“部署公匙”，新建之后，粘贴C:\Users\MACHENIKE\.ssh目录下“id_rsa.pub”文件里的公匙，勾选“永久有效”，这里要注意的是一定要勾选“授予推送权限”，否则属性为只读，就不能部署了，密匙和之前在GitHub上要一致，这样才能一起部署。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>打开网站配置文件_config.yml，找到“deploy”下的“repo”，修改成：</p>
<pre class="line-numbers language-html"><code class="language-html">  repo: 
    github: git@github.com:xxx/xxx.github.io.git
    coding: git@e.coding.net:fjct/blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中，xxx为你的github用户名，coding的SSH在你的“项目概览”右下角，复制粘贴即可，最后保存。注意，当部署报错时，把密匙同目录下的“known_hosts”给删了，然后在部署时出现“Are you sure you want to continue connecting (yes/no/[fingerprint])?”中输入“yes”即可。<br><img src="https://img-blog.csdnimg.cn/20200326213636257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTk0MzY4,size_16,color_FFFFFF,t_70#pic_center" alt="2"></p>
<p>然后在你的blog文件目录下，右键打开git bush here，输入：</p>
<pre class="line-numbers language-html"><code class="language-html">hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等待部署完成即可。</p>
<h2 id="双线解析"><a href="#双线解析" class="headerlink" title="双线解析"></a>双线解析</h2><p>这里照着我图片里的设置对域名进行解析就好了，解析好之后记得在“静态网页”设置里绑定。<br><img src="https://img-blog.csdnimg.cn/20200326213427183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTk0MzY4,size_16,color_FFFFFF,t_70#pic_center" alt="3"></p>
<p>绑定域名很简单，我就不说了。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>网站相关</category>
      </categories>
      <tags>
        <tag>hexo,coding</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow2与CUDA版本问题</title>
    <url>/2020/03/22/2020-03-22-tensorflow2-yu-cuda-ban-ben-wen-ti/</url>
    <content><![CDATA[<p>按照目前的官方文档，tensorflow2.0.0需要CUDA10.0,tensorflow2.1.0需要CUDA10.1</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>tensorflow，CUDA</tag>
      </tags>
  </entry>
  <entry>
    <title>安装过程中出现卡Ubuntu Logo界面</title>
    <url>/2020/03/22/2020-03-22-an-zhuang-guo-cheng-zhong-chu-xian-qia-ubuntu-logo-jie-mian/</url>
    <content><![CDATA[<p>多半是英伟达显卡驱动不兼容的问题，下面介绍解决方法：<a id="more"></a></p>
<p>重启，选择U盘启动后，启动进入grub后，选项停在Install Ubuntu,按e键进入引导临时编辑模式，按键盘左右箭头移动光标，找到  quiet splash —，添加nomodeset。修改完后按F10启动安装即可。</p>
<pre class="line-numbers language-html"><code class="language-html">quiet splash nomodeset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不过你下次进入仍然要这样操作，下面介绍一劳永逸的办法：</p>
<pre class="line-numbers language-html"><code class="language-html">sudo gedit /etc/default/grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>找到：GRUB_CMDLINE_LINUX_DEFAULT=“quiet splash”</p>
<p>修改为：GRUB_CMDLINE_LINUX_DEFAULT=“quiet splash nomodeset”</p>
<p>保存后记得update 一下，重启系统。</p>
<pre class="line-numbers language-html"><code class="language-html">sudo update-grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu卡Logo</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10下安装Ubuntu16.04(双系统双硬盘)-传统模式</title>
    <url>/2020/03/21/2020-03-21-win10-xia-an-zhuang-ubuntu16.04-shuang-xi-tong-shuang-ying-pan-chuan-tong-mo-shi/</url>
    <content><![CDATA[<h1 id="所需工具："><a href="#所需工具：" class="headerlink" title="所需工具："></a>所需工具：</h1><h3 id="win10下安装软碟通UltraISO、不少于2G的U盘"><a href="#win10下安装软碟通UltraISO、不少于2G的U盘" class="headerlink" title="win10下安装软碟通UltraISO、不少于2G的U盘"></a>win10下安装软碟通UltraISO、不少于2G的U盘</h3><h1 id="一、Win10下准备工作"><a href="#一、Win10下准备工作" class="headerlink" title="一、Win10下准备工作"></a>一、Win10下准备工作</h1><h2 id="1-划分空间（右键“菜单”选择“磁盘管理”，右键硬盘“压缩卷”）"><a href="#1-划分空间（右键“菜单”选择“磁盘管理”，右键硬盘“压缩卷”）" class="headerlink" title="1.划分空间（右键“菜单”选择“磁盘管理”，右键硬盘“压缩卷”）"></a>1.划分空间（右键“菜单”选择“磁盘管理”，右键硬盘“压缩卷”）</h2><p>博主电脑配置240G固态+1T机械硬盘，在当前的系统所在硬盘（一般是在固态硬盘）划分500MB（至少400MB）的未分配空间，此处将作为ubuntu16.04的boot空间。其余的ubuntu空间可在机械硬盘（一般建议在机械硬盘的最后一个盘符）中划分，硬盘足够大的话，空着还不如多分点，参照下表，至少给个80GB吧。<a id="more"></a></p>
<table>
<thead>
<tr>
<th>挂载点(目录)</th>
<th>建议大小</th>
<th>格式</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>/boot</td>
<td>至少400MB</td>
<td>ext4</td>
<td>一般几百M，主要存放linux内核及一些引导文件</td>
</tr>
<tr>
<td>/swap</td>
<td>通常为8G</td>
<td>交换空间</td>
<td>相当于虚拟内存，一般是物理内存的2倍</td>
</tr>
<tr>
<td>/</td>
<td>30GB左右</td>
<td>ext4</td>
<td>根目录</td>
</tr>
<tr>
<td>/home</td>
<td>划分剩余空间</td>
<td>ext4</td>
<td>用户工作目录，用户下载存储的数据、文件都存放在这</td>
</tr>
</tbody></table>
<h2 id="2-制作ubuntu启动盘"><a href="#2-制作ubuntu启动盘" class="headerlink" title="2.制作ubuntu启动盘"></a>2.制作ubuntu启动盘</h2><p>1.打开安装好的软碟通，点击左上角“文件”单击“打开”，选择下载好的ubuntu ios文件并打开。</p>
<p>2.点击菜单栏上的“启动”，选择“写入硬盘镜像”，选择你的u盘写入即可，请确保你的u盘数据已经备份好或不重要！等待写入完成即制作完毕。</p>
<h1 id="二、安装Ubuntu（这里没办法截图，我也懒得拍了）"><a href="#二、安装Ubuntu（这里没办法截图，我也懒得拍了）" class="headerlink" title="二、安装Ubuntu（这里没办法截图，我也懒得拍了）"></a>二、安装Ubuntu（这里没办法截图，我也懒得拍了）</h1><p>  1.断网，不断网后面安装的时候会卡的（毕竟是外网），重启电脑，插上u盘，此时你需要设置电脑的主板，打开ufei模式，只要打开这个模式就好，其他别乱动。不同厂家的电脑，进入主板或打开启动项菜单的快捷键不一样，自行去网上搜索，博主是按F2进入。开启后默认会选择你的U盘启动，不放心可以在启动时选择启动项菜单选中U盘，不开启ufei模式启动直接选择u盘会报错。  </p>
<p>2.进入启动界面，选择立即安装。你也可以先点击try ubuntu试用，可以操作ubuntu，打开里面的浏览器查阅资料等。立即安装后面的流程，是操作不了ubuntu系统的。</p>
<p>3.自行选择语言，都有中文的，放心，看到有是否勾选“为图形或无线硬件…”的，可选可不选，问题不大，反正后面也会自己安装。</p>
<p>4.安装类型选择“其他选项”，这样我们才能自行划分分区。不建议选“安装Ubuntu，与Windows10共存”，千万不要选“清除整个磁盘并安装Ubuntu”！字面意思！</p>
<p> 5.分区，选中“空闲”区域，核对一下大小对不对，是不是自己压缩出来的大小，点击左下角的加号创建分区，若创建错了就点减号删除，然后下拉菜单找到/boot，也就只有这个是要放在在固态硬盘上的空闲区域创建的，其他的都在比较大的那个空闲区域创建，同样的步骤，按照上面表格的参数设置，全都选择逻辑分区就好了。</p>
<p>6.核心步骤，“安装启动引导器的设备：”，此处选择/boot分区所在的设备，不要看走眼了，一定要细心。然后提示确认分区信息，点击继续。</p>
<p> 7.后面地区、语言、设置用户密码，都挺简单的，看着操作就好了。</p>
<p>8.点击安装，坐等。一般十分钟之内就装好了，没拔网线的别说我没叫你断网。</p>
<p> 9.安装结束，重启电脑。重启后进入主板设置，把uefi模式关了，u盘也拔了（功成身退了，不过系统出问题的时候还得靠他，别乱动它）然后到进入启动菜单项选择固态硬盘启动，也就是你安装引导系统的地方，启动就可以看到grub的引导了，点击ubuntu进入就可以了。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu安装，双系统，U盘系统盘</tag>
      </tags>
  </entry>
  <entry>
    <title>该做正事了！</title>
    <url>/2020/03/21/2020-03-21-gai-zuo-zheng-shi-liao/</url>
    <content><![CDATA[<p>​        虽然说用wordpress建个博客非常容易，但看着看着总会觉得自己的网站有点low，为何别人家的网站就如此高大上呢。。。郁闷，不过话说回来，谁叫我只是个web前端后端都是零基础的小白呢，要是随随便便所见即所得那人家还要不要吃饭了。。。<a id="more"></a>算了，能做成啥样做啥样吧，毕竟精力有限，以后有机会能改一点是一点吧。（没有英语的学习环境主题和插件最好还是用国人或者汉化的吧。。。不然看不明白瞎折腾得折腾挺久的）好几次折腾半天都想着换个平台重新建站。。。毕竟简简单单才是真。我的本意只是有个载体而已啊，我明明还有更重要的事情要做啊T T</p>
<p>​        真好，又浪费了一天呢~ </p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>闲时杂谈</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>世界，你好（移植Wordpress，好吧，hexo真香）</title>
    <url>/2020/03/20/2020-03-20-hello-world/</url>
    <content><![CDATA[<h1 id="建站的初衷"><a href="#建站的初衷" class="headerlink" title="建站的初衷"></a>建站的初衷</h1><p>   今天本该是愉快的一天，无奈经历了一件两件这样那样的事，估计要带着五味杂陈的心情结束这一天了。。。<a id="more"></a><br>   其实早在几个小时前，这个博客系统就已经通过emlog搭建好了，虽然一路顺顺利利，elmog后台操作起来也非常地友好简洁，但碍于它的用户实在较少，主题和插件不仅少，更新还慢，无奈之下只好再次转战wordpress，上次出现的问题以为只是单纯地备案没下来（原谅我的天真），没想到这个问题再次出现并且为难了我一晚上，没错，就是500！！！虽然中途胡乱操作断断续续解决了，但在编辑文章时仍然出现，无奈只好试试放弃一键部署，自己传最新版的wordpress试下，结果问题仍然存在。。。这应该是宝塔面板自身的问题了吧，参考： <a href="https://www.bt.cn/bbs/thread-33097-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-33097-1-1.html</a> ，其中配置文件并没有啥变化，不知道是不是我自己操作的问题，反正依葫芦画瓢，暂时解决了问题，不过仍然担心下一秒的啥操作又让他癫痫了。。。（战战兢兢地写下了这第一篇文章）<br>   好了，不多扯了，回归正题。其实此站建立的初衷就是为了自己在学习的过程中，能够有个载体记录下一路上碰到的大大小小的问题，人的记忆毕竟是有限的，也难免下次会再碰到同样的问题，同时也给有缘人提供个参考。而且，有个属于自己的博客不是挺好的吗？哈哈~</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>闲时杂谈</category>
      </categories>
      <tags>
        <tag>建站初衷，第一篇blog</tag>
      </tags>
  </entry>
</search>
